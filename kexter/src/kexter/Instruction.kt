/*
 * Copyright (C) 2024 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package kexter

class Instruction(val opcode: Opcode, val index: UInt, val payload: ByteArray)

enum class InstructionFormat(val payloadSize: UInt) {
  K10x(1u),
  K12x(1u),
  K11n(1u),
  K11x(1u),
  K10t(1u),
  K20t(3u),
  K20bc(3u),
  K21c(3u),
  K22x(3u),
  K21s(3u),
  K21t(3u),
  K21h(3u),
  K23x(3u),
  K22b(3u),
  K22s(3u),
  K22t(3u),
  K22c(3u),
  K22cs(3u),
  K30t(5u),
  K31t(5u),
  K31c(5u),
  K32x(5u),
  K31i(5u),
  K35c(5u),
  K35ms(5u),
  K35mi(5u),
  K3rc(5u),
  K3rms(5u),
  K3rmi(5u),
  K45cc(7u),
  K4rcc(7u),
  K51l(9u),
}

enum class Opcode(val type: UInt, val format: InstructionFormat, val displayName: String) {
  NOP(0x00u, InstructionFormat.K10x, "nop"),
  MOVE(0x01u, InstructionFormat.K12x, "move"),
  MOVE_FROM16(0x02u, InstructionFormat.K22x, "move/from16"),
  MOVE_16(0x03u, InstructionFormat.K32x, "move/16"),
  MOVE_WIDE(0x04u, InstructionFormat.K12x, "move-wide"),
  MOVE_WIDE_FROM16(0x05u, InstructionFormat.K22x, "move-wide/from16"),
  MOVE_WIDE_16(0x06u, InstructionFormat.K32x, "move-wide/16"),
  MOVE_OBJECT(0x07u, InstructionFormat.K12x, "move-object"),
  MOVE_OBJECT_FROM16(0x08u, InstructionFormat.K22x, "move-object/from16"),
  MOVE_OBJECT_16(0x09u, InstructionFormat.K32x, "move-object/16"),
  MOVE_RESULT(0x0Au, InstructionFormat.K11x, "move-result"),
  MOVE_RESULT_WIDE(0x0Bu, InstructionFormat.K11x, "move-result-wide"),
  MOVE_RESULT_OBJECT(0x0Cu, InstructionFormat.K11x, "move-result-object"),
  MOVE_EXCEPTION(0x0Du, InstructionFormat.K11x, "move-exception"),
  RETURN_VOID(0x0Eu, InstructionFormat.K10x, "return-void"),
  RETURN(0x0Fu, InstructionFormat.K11x, "return"),
  RETURN_WIDE(0x10u, InstructionFormat.K11x, "return-wide"),
  RETURN_OBJECT(0x11u, InstructionFormat.K11x, "return-object"),
  CONST_4(0x12u, InstructionFormat.K11n, "const/4"),
  CONST_16(0x13u, InstructionFormat.K21s, "const/16"),
  CONST(0x14u, InstructionFormat.K31i, "const"),
  CONST_HIGH16(0x15u, InstructionFormat.K21h, "const/high16"),
  CONST_WIDE_16(0x16u, InstructionFormat.K21s, "const-wide/16"),
  CONST_WIDE_32(0x17u, InstructionFormat.K31i, "const-wide/32"),
  CONST_WIDE(0x18u, InstructionFormat.K51l, "const-wide"),
  CONST_WIDE_HIGH16(0x19u, InstructionFormat.K21h, "const-wide/high16"),
  CONST_STRING(0x1Au, InstructionFormat.K21c, "const-string"),
  CONST_STRING_JUMBO(0x1Bu, InstructionFormat.K31c, "const-string/jumbo"),
  CONST_CLASS(0x1Cu, InstructionFormat.K21c, "const-class"),
  MONITOR_ENTER(0x1Du, InstructionFormat.K11x, "monitor-enter"),
  MONITOR_EXIT(0x1Eu, InstructionFormat.K11x, "monitor-exit"),
  CHECK_CAST(0x1Fu, InstructionFormat.K21c, "check-cast"),
  INSTANCE_OF(0x20u, InstructionFormat.K22c, "instance-of"),
  ARRAY_LENGTH(0x21u, InstructionFormat.K12x, "array-length"),
  NEW_INSTANCE(0x22u, InstructionFormat.K21c, "new-instance"),
  NEW_ARRAY(0x23u, InstructionFormat.K22c, "new-array"),
  FILLED_NEW_ARRAY(0x24u, InstructionFormat.K35c, "filled-new-array"),
  FILLED_NEW_ARRAY_RANGE(0x25u, InstructionFormat.K3rc, "filled-new-array/range"),
  FILL_ARRAY_DATA(0x26u, InstructionFormat.K31t, "fill-array-data"),
  THROW(0x27u, InstructionFormat.K11x, "throw"),
  GOTO(0x28u, InstructionFormat.K10t, "goto"),
  GOTO_16(0x29u, InstructionFormat.K20t, "goto/16"),
  GOTO_32(0x2Au, InstructionFormat.K30t, "goto/32"),
  PACKED_SWITCH(0x2Bu, InstructionFormat.K31t, "packed-switch"),
  SPARSE_SWITCH(0x2Cu, InstructionFormat.K31t, "sparse-switch"),
  CMPL_FLOAT(0x2Du, InstructionFormat.K23x, "cmpl-float"),
  CMPG_FLOAT(0x2Eu, InstructionFormat.K23x, "cmpg-float"),
  CMPL_DOUBLE(0x2Fu, InstructionFormat.K23x, "cmpl-double"),
  CMPG_DOUBLE(0x30u, InstructionFormat.K23x, "cmpg-double"),
  CMP_LONG(0x31u, InstructionFormat.K23x, "cmp-long"),
  IF_EQ(0x32u, InstructionFormat.K22t, "if-eq"),
  IF_NE(0x33u, InstructionFormat.K22t, "if-ne"),
  IF_LT(0x34u, InstructionFormat.K22t, "if-lt"),
  IF_GE(0x35u, InstructionFormat.K22t, "if-ge"),
  IF_GT(0x36u, InstructionFormat.K22t, "if-gt"),
  IF_LE(0x37u, InstructionFormat.K22t, "if-le"),
  IF_EQZ(0x38u, InstructionFormat.K21t, "if-eqz"),
  IF_NEZ(0x39u, InstructionFormat.K21t, "if-nez"),
  IF_LTZ(0x3Au, InstructionFormat.K21t, "if-ltz"),
  IF_GEZ(0x3Bu, InstructionFormat.K21t, "if-gez"),
  IF_GTZ(0x3Cu, InstructionFormat.K21t, "if-gtz"),
  IF_LEZ(0x3Du, InstructionFormat.K21t, "if-lez"),
  UNUSED_3E(0x3Eu, InstructionFormat.K10x, "unused-3e"),
  UNUSED_3F(0x3Fu, InstructionFormat.K10x, "unused-3f"),
  UNUSED_40(0x40u, InstructionFormat.K10x, "unused-40"),
  UNUSED_41(0x41u, InstructionFormat.K10x, "unused-41"),
  UNUSED_42(0x42u, InstructionFormat.K10x, "unused-42"),
  UNUSED_43(0x43u, InstructionFormat.K10x, "unused-43"),
  AGET(0x44u, InstructionFormat.K23x, "aget"),
  AGET_WIDE(0x45u, InstructionFormat.K23x, "aget-wide"),
  AGET_OBJECT(0x46u, InstructionFormat.K23x, "aget-object"),
  AGET_BOOLEAN(0x47u, InstructionFormat.K23x, "aget-boolean"),
  AGET_BYTE(0x48u, InstructionFormat.K23x, "aget-byte"),
  AGET_CHAR(0x49u, InstructionFormat.K23x, "aget-char"),
  AGET_SHORT(0x4Au, InstructionFormat.K23x, "aget-short"),
  APUT(0x4Bu, InstructionFormat.K23x, "aput"),
  APUT_WIDE(0x4Cu, InstructionFormat.K23x, "aput-wide"),
  APUT_OBJECT(0x4Du, InstructionFormat.K23x, "aput-object"),
  APUT_BOOLEAN(0x4Eu, InstructionFormat.K23x, "aput-boolean"),
  APUT_BYTE(0x4Fu, InstructionFormat.K23x, "aput-byte"),
  APUT_CHAR(0x50u, InstructionFormat.K23x, "aput-char"),
  APUT_SHORT(0x51u, InstructionFormat.K23x, "aput-short"),
  IGET(0x52u, InstructionFormat.K22c, "iget"),
  IGET_WIDE(0x53u, InstructionFormat.K22c, "iget-wide"),
  IGET_OBJECT(0x54u, InstructionFormat.K22c, "iget-object"),
  IGET_BOOLEAN(0x55u, InstructionFormat.K22c, "iget-boolean"),
  IGET_BYTE(0x56u, InstructionFormat.K22c, "iget-byte"),
  IGET_CHAR(0x57u, InstructionFormat.K22c, "iget-char"),
  IGET_SHORT(0x58u, InstructionFormat.K22c, "iget-short"),
  IPUT(0x59u, InstructionFormat.K22c, "iput"),
  IPUT_WIDE(0x5Au, InstructionFormat.K22c, "iput-wide"),
  IPUT_OBJECT(0x5Bu, InstructionFormat.K22c, "iput-object"),
  IPUT_BOOLEAN(0x5Cu, InstructionFormat.K22c, "iput-boolean"),
  IPUT_BYTE(0x5Du, InstructionFormat.K22c, "iput-byte"),
  IPUT_CHAR(0x5Eu, InstructionFormat.K22c, "iput-char"),
  IPUT_SHORT(0x5Fu, InstructionFormat.K22c, "iput-short"),
  SGET(0x60u, InstructionFormat.K21c, "sget"),
  SGET_WIDE(0x61u, InstructionFormat.K21c, "sget-wide"),
  SGET_OBJECT(0x62u, InstructionFormat.K21c, "sget-object"),
  SGET_BOOLEAN(0x63u, InstructionFormat.K21c, "sget-boolean"),
  SGET_BYTE(0x64u, InstructionFormat.K21c, "sget-byte"),
  SGET_CHAR(0x65u, InstructionFormat.K21c, "sget-char"),
  SGET_SHORT(0x66u, InstructionFormat.K21c, "sget-short"),
  SPUT(0x67u, InstructionFormat.K21c, "sput"),
  SPUT_WIDE(0x68u, InstructionFormat.K21c, "sput-wide"),
  SPUT_OBJECT(0x69u, InstructionFormat.K21c, "sput-object"),
  SPUT_BOOLEAN(0x6Au, InstructionFormat.K21c, "sput-boolean"),
  SPUT_BYTE(0x6Bu, InstructionFormat.K21c, "sput-byte"),
  SPUT_CHAR(0x6Cu, InstructionFormat.K21c, "sput-char"),
  SPUT_SHORT(0x6Du, InstructionFormat.K21c, "sput-short"),
  INVOKE_VIRTUAL(0x6Eu, InstructionFormat.K35c, "invoke-virtual"),
  INVOKE_SUPER(0x6Fu, InstructionFormat.K35c, "invoke-super"),
  INVOKE_DIRECT(0x70u, InstructionFormat.K35c, "invoke-direct"),
  INVOKE_STATIC(0x71u, InstructionFormat.K35c, "invoke-static"),
  INVOKE_INTERFACE(0x72u, InstructionFormat.K35c, "invoke-interface"),
  RETURN_VOID_NO_BARRIER(0x73u, InstructionFormat.K10x, "return-void-no-barrier"),
  INVOKE_VIRTUAL_RANGE(0x74u, InstructionFormat.K3rc, "invoke-virtual/range"),
  INVOKE_SUPER_RANGE(0x75u, InstructionFormat.K3rc, "invoke-super/range"),
  INVOKE_DIRECT_RANGE(0x76u, InstructionFormat.K3rc, "invoke-direct/range"),
  INVOKE_STATIC_RANGE(0x77u, InstructionFormat.K3rc, "invoke-static/range"),
  INVOKE_INTERFACE_RANGE(0x78u, InstructionFormat.K3rc, "invoke-interface/range"),
  UNUSED_79(0x79u, InstructionFormat.K10x, "unused-79"),
  UNUSED_7A(0x7Au, InstructionFormat.K10x, "unused-7a"),
  NEG_INT(0x7Bu, InstructionFormat.K12x, "neg-int"),
  NOT_INT(0x7Cu, InstructionFormat.K12x, "not-int"),
  NEG_LONG(0x7Du, InstructionFormat.K12x, "neg-long"),
  NOT_LONG(0x7Eu, InstructionFormat.K12x, "not-long"),
  NEG_FLOAT(0x7Fu, InstructionFormat.K12x, "neg-float"),
  NEG_DOUBLE(0x80u, InstructionFormat.K12x, "neg-double"),
  INT_TO_LONG(0x81u, InstructionFormat.K12x, "int-to-long"),
  INT_TO_FLOAT(0x82u, InstructionFormat.K12x, "int-to-float"),
  INT_TO_DOUBLE(0x83u, InstructionFormat.K12x, "int-to-double"),
  LONG_TO_INT(0x84u, InstructionFormat.K12x, "long-to-int"),
  LONG_TO_FLOAT(0x85u, InstructionFormat.K12x, "long-to-float"),
  LONG_TO_DOUBLE(0x86u, InstructionFormat.K12x, "long-to-double"),
  FLOAT_TO_INT(0x87u, InstructionFormat.K12x, "float-to-int"),
  FLOAT_TO_LONG(0x88u, InstructionFormat.K12x, "float-to-long"),
  FLOAT_TO_DOUBLE(0x89u, InstructionFormat.K12x, "float-to-double"),
  DOUBLE_TO_INT(0x8Au, InstructionFormat.K12x, "double-to-int"),
  DOUBLE_TO_LONG(0x8Bu, InstructionFormat.K12x, "double-to-long"),
  DOUBLE_TO_FLOAT(0x8Cu, InstructionFormat.K12x, "double-to-float"),
  INT_TO_BYTE(0x8Du, InstructionFormat.K12x, "int-to-byte"),
  INT_TO_CHAR(0x8Eu, InstructionFormat.K12x, "int-to-char"),
  INT_TO_SHORT(0x8Fu, InstructionFormat.K12x, "int-to-short"),
  ADD_INT(0x90u, InstructionFormat.K23x, "add-int"),
  SUB_INT(0x91u, InstructionFormat.K23x, "sub-int"),
  MUL_INT(0x92u, InstructionFormat.K23x, "mul-int"),
  DIV_INT(0x93u, InstructionFormat.K23x, "div-int"),
  REM_INT(0x94u, InstructionFormat.K23x, "rem-int"),
  AND_INT(0x95u, InstructionFormat.K23x, "and-int"),
  OR_INT(0x96u, InstructionFormat.K23x, "or-int"),
  XOR_INT(0x97u, InstructionFormat.K23x, "xor-int"),
  SHL_INT(0x98u, InstructionFormat.K23x, "shl-int"),
  SHR_INT(0x99u, InstructionFormat.K23x, "shr-int"),
  USHR_INT(0x9Au, InstructionFormat.K23x, "ushr-int"),
  ADD_LONG(0x9Bu, InstructionFormat.K23x, "add-long"),
  SUB_LONG(0x9Cu, InstructionFormat.K23x, "sub-long"),
  MUL_LONG(0x9Du, InstructionFormat.K23x, "mul-long"),
  DIV_LONG(0x9Eu, InstructionFormat.K23x, "div-long"),
  REM_LONG(0x9Fu, InstructionFormat.K23x, "rem-long"),
  AND_LONG(0xA0u, InstructionFormat.K23x, "and-long"),
  OR_LONG(0xA1u, InstructionFormat.K23x, "or-long"),
  XOR_LONG(0xA2u, InstructionFormat.K23x, "xor-long"),
  SHL_LONG(0xA3u, InstructionFormat.K23x, "shl-long"),
  SHR_LONG(0xA4u, InstructionFormat.K23x, "shr-long"),
  USHR_LONG(0xA5u, InstructionFormat.K23x, "ushr-long"),
  ADD_FLOAT(0xA6u, InstructionFormat.K23x, "add-float"),
  SUB_FLOAT(0xA7u, InstructionFormat.K23x, "sub-float"),
  MUL_FLOAT(0xA8u, InstructionFormat.K23x, "mul-float"),
  DIV_FLOAT(0xA9u, InstructionFormat.K23x, "div-float"),
  REM_FLOAT(0xAAu, InstructionFormat.K23x, "rem-float"),
  ADD_DOUBLE(0xABu, InstructionFormat.K23x, "add-double"),
  SUB_DOUBLE(0xACu, InstructionFormat.K23x, "sub-double"),
  MUL_DOUBLE(0xADu, InstructionFormat.K23x, "mul-double"),
  DIV_DOUBLE(0xAEu, InstructionFormat.K23x, "div-double"),
  REM_DOUBLE(0xAFu, InstructionFormat.K23x, "rem-double"),
  ADD_INT_2ADDR(0xB0u, InstructionFormat.K12x, "add-int/2addr"),
  SUB_INT_2ADDR(0xB1u, InstructionFormat.K12x, "sub-int/2addr"),
  MUL_INT_2ADDR(0xB2u, InstructionFormat.K12x, "mul-int/2addr"),
  DIV_INT_2ADDR(0xB3u, InstructionFormat.K12x, "div-int/2addr"),
  REM_INT_2ADDR(0xB4u, InstructionFormat.K12x, "rem-int/2addr"),
  AND_INT_2ADDR(0xB5u, InstructionFormat.K12x, "and-int/2addr"),
  OR_INT_2ADDR(0xB6u, InstructionFormat.K12x, "or-int/2addr"),
  XOR_INT_2ADDR(0xB7u, InstructionFormat.K12x, "xor-int/2addr"),
  SHL_INT_2ADDR(0xB8u, InstructionFormat.K12x, "shl-int/2addr"),
  SHR_INT_2ADDR(0xB9u, InstructionFormat.K12x, "shr-int/2addr"),
  USHR_INT_2ADDR(0xBAu, InstructionFormat.K12x, "ushr-int/2addr"),
  ADD_LONG_2ADDR(0xBBu, InstructionFormat.K12x, "add-long/2addr"),
  SUB_LONG_2ADDR(0xBCu, InstructionFormat.K12x, "sub-long/2addr"),
  MUL_LONG_2ADDR(0xBDu, InstructionFormat.K12x, "mul-long/2addr"),
  DIV_LONG_2ADDR(0xBEu, InstructionFormat.K12x, "div-long/2addr"),
  REM_LONG_2ADDR(0xBFu, InstructionFormat.K12x, "rem-long/2addr"),
  AND_LONG_2ADDR(0xC0u, InstructionFormat.K12x, "and-long/2addr"),
  OR_LONG_2ADDR(0xC1u, InstructionFormat.K12x, "or-long/2addr"),
  XOR_LONG_2ADDR(0xC2u, InstructionFormat.K12x, "xor-long/2addr"),
  SHL_LONG_2ADDR(0xC3u, InstructionFormat.K12x, "shl-long/2addr"),
  SHR_LONG_2ADDR(0xC4u, InstructionFormat.K12x, "shr-long/2addr"),
  USHR_LONG_2ADDR(0xC5u, InstructionFormat.K12x, "ushr-long/2addr"),
  ADD_FLOAT_2ADDR(0xC6u, InstructionFormat.K12x, "add-float/2addr"),
  SUB_FLOAT_2ADDR(0xC7u, InstructionFormat.K12x, "sub-float/2addr"),
  MUL_FLOAT_2ADDR(0xC8u, InstructionFormat.K12x, "mul-float/2addr"),
  DIV_FLOAT_2ADDR(0xC9u, InstructionFormat.K12x, "div-float/2addr"),
  REM_FLOAT_2ADDR(0xCAu, InstructionFormat.K12x, "rem-float/2addr"),
  ADD_DOUBLE_2ADDR(0xCBu, InstructionFormat.K12x, "add-double/2addr"),
  SUB_DOUBLE_2ADDR(0xCCu, InstructionFormat.K12x, "sub-double/2addr"),
  MUL_DOUBLE_2ADDR(0xCDu, InstructionFormat.K12x, "mul-double/2addr"),
  DIV_DOUBLE_2ADDR(0xCEu, InstructionFormat.K12x, "div-double/2addr"),
  REM_DOUBLE_2ADDR(0xCFu, InstructionFormat.K12x, "rem-double/2addr"),
  ADD_INT_LIT16(0xD0u, InstructionFormat.K22s, "add-int/lit16"),
  RSUB_INT(0xD1u, InstructionFormat.K22s, "rsub-int"),
  MUL_INT_LIT16(0xD2u, InstructionFormat.K22s, "mul-int/lit16"),
  DIV_INT_LIT16(0xD3u, InstructionFormat.K22s, "div-int/lit16"),
  REM_INT_LIT16(0xD4u, InstructionFormat.K22s, "rem-int/lit16"),
  AND_INT_LIT16(0xD5u, InstructionFormat.K22s, "and-int/lit16"),
  OR_INT_LIT16(0xD6u, InstructionFormat.K22s, "or-int/lit16"),
  XOR_INT_LIT16(0xD7u, InstructionFormat.K22s, "xor-int/lit16"),
  ADD_INT_LIT8(0xD8u, InstructionFormat.K22b, "add-int/lit8"),
  RSUB_INT_LIT8(0xD9u, InstructionFormat.K22b, "rsub-int/lit8"),
  MUL_INT_LIT8(0xDAu, InstructionFormat.K22b, "mul-int/lit8"),
  DIV_INT_LIT8(0xDBu, InstructionFormat.K22b, "div-int/lit8"),
  REM_INT_LIT8(0xDCu, InstructionFormat.K22b, "rem-int/lit8"),
  AND_INT_LIT8(0xDDu, InstructionFormat.K22b, "and-int/lit8"),
  OR_INT_LIT8(0xDEu, InstructionFormat.K22b, "or-int/lit8"),
  XOR_INT_LIT8(0xDFu, InstructionFormat.K22b, "xor-int/lit8"),
  SHL_INT_LIT8(0xE0u, InstructionFormat.K22b, "shl-int/lit8"),
  SHR_INT_LIT8(0xE1u, InstructionFormat.K22b, "shr-int/lit8"),
  USHR_INT_LIT8(0xE2u, InstructionFormat.K22b, "ushr-int/lit8"),
  IGET_QUICK(0xE3u, InstructionFormat.K22c, "iget-quick"),
  IGET_WIDE_QUICK(0xE4u, InstructionFormat.K22c, "iget-wide-quick"),
  IGET_OBJECT_QUICK(0xE5u, InstructionFormat.K22c, "iget-object-quick"),
  IPUT_QUICK(0xE6u, InstructionFormat.K22c, "iput-quick"),
  IPUT_WIDE_QUICK(0xE7u, InstructionFormat.K22c, "iput-wide-quick"),
  IPUT_OBJECT_QUICK(0xE8u, InstructionFormat.K22c, "iput-object-quick"),
  INVOKE_VIRTUAL_QUICK(0xE9u, InstructionFormat.K35c, "invoke-virtual-quick"),
  INVOKE_VIRTUAL_RANGE_QUICK(0xEAu, InstructionFormat.K3rc, "invoke-virtual/range-quick"),
  IPUT_BOOLEAN_QUICK(0xEBu, InstructionFormat.K22c, "iput-boolean-quick"),
  IPUT_BYTE_QUICK(0xECu, InstructionFormat.K22c, "iput-byte-quick"),
  IPUT_CHAR_QUICK(0xEDu, InstructionFormat.K22c, "iput-char-quick"),
  IPUT_SHORT_QUICK(0xEEu, InstructionFormat.K22c, "iput-short-quick"),
  IGET_BOOLEAN_QUICK(0xEFu, InstructionFormat.K22c, "iget-boolean-quick"),
  IGET_BYTE_QUICK(0xF0u, InstructionFormat.K22c, "iget-byte-quick"),
  IGET_CHAR_QUICK(0xF1u, InstructionFormat.K22c, "iget-char-quick"),
  IGET_SHORT_QUICK(0xF2u, InstructionFormat.K22c, "iget-short-quick"),
  UNUSED_F3(0xF3u, InstructionFormat.K10x, "unused-f3"),
  UNUSED_F4(0xF4u, InstructionFormat.K10x, "unused-f4"),
  UNUSED_F5(0xF5u, InstructionFormat.K10x, "unused-f5"),
  UNUSED_F6(0xF6u, InstructionFormat.K10x, "unused-f6"),
  UNUSED_F7(0xF7u, InstructionFormat.K10x, "unused-f7"),
  UNUSED_F8(0xF8u, InstructionFormat.K10x, "unused-f8"),
  UNUSED_F9(0xF9u, InstructionFormat.K10x, "unused-f9"),
  INVOKE_POLYMORPHIC(0xFAu, InstructionFormat.K45cc, "invoke-polymorphic"),
  INVOKE_POLYMORPHIC_RANGE(0xFBu, InstructionFormat.K4rcc, "invoke-polymorphic/range"),
  INVOKE_CUSTOM(0xFCu, InstructionFormat.K35c, "invoke-custom"),
  INVOKE_CUSTOM_RANGE(0xFDu, InstructionFormat.K3rc, "invoke-custom/range"),
  CONST_METHOD_HANDLE(0xFEu, InstructionFormat.K21c, "const-method-handle"),
  CONST_METHOD_TYPE(0xFFu, InstructionFormat.K21c, "const-method-type");

  fun toHex(): String = "0x%02x".format(type.toInt())

  companion object {

    private val map: Map<UByte, Opcode> = entries.associateBy { i -> i.type.toUByte() }

    fun fromUByte(type: UByte): Opcode {
      if (!map.keys.contains(type)) {
        throw IllegalStateException("Unknown $type")
      }
      return map[type]!!
    }
  }
}
