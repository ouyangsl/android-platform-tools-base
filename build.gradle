subprojects {
    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'signing'
    apply from:'https://raw.github.com/breskeby/gradleplugins/master/emmaPlugin/emma.gradle'

    buildDir = project.file("$rootDir/../../out/host/common/tools/base/$project.name")

    repositories {
        mavenCentral()
    }

    dependencies{
        emma "emma:emma:2.0.5312"
        emma "emma:emma_ant:2.0.5312"
    }

    emma{
        reportPath = "build/reports/emma"
    }

    project.ext.baseVersion = '22.0'

    project.ext.sonatypeUsername = project.hasProperty('sonatypeUsername') ? sonatypeUsername : ""
    project.ext.sonatypePassword = project.hasProperty('sonatypePassword') ? sonatypePassword : ""

    // set all java compilation to use UTF-8 encoding.
    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    // custom tasks for creating source/javadoc jars
    task sourcesJar(type: Jar, dependsOn:classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn:javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    // add javadoc/source jar tasks as artifacts
    artifacts {
        archives jar

        archives sourcesJar
        archives javadocJar
    }

    task publishLocal(type: Upload) {
        configuration = configurations.archives
        repositories {
            mavenDeployer {
                repository(url: uri("$rootDir/repo"))
            }
        }
    }
}

buildDir = project.file("../../out/host/common/tools/base/build")

// delay evaluation of this project before all subprojects have been evaluated.
subprojects.each { subproject -> evaluationDependsOn(subproject.name) }

def testTasks = subprojects.collect { it.tasks.withType(Test) }.flatten()

task aggregateResults(type: Copy) {
    from { testTasks*.testResultsDir }
    into { file("$project.buildDir/results") }
}
aggregateResults.dependsOn testTasks

task makeAggregateReport(dependsOn: aggregateResults) {
    def report = new org.gradle.api.internal.tasks.testing.junit.report.DefaultTestReport(testReportDir: file("$project.buildDir/reports/tests"), testResultsDir: file("$project.buildDir/results"))
    report.generateReport()
}

task check {
    //nothing
}
check.dependsOn makeAggregateReport
