buildscript {
    repositories {
        maven { url "$rootDir/../../prebuilts/tools/common/gradle-plugins" }
    }
    dependencies {
        classpath 'com.android.tools.internal:distrib-plugins:1.0'
    }
}

// ext.androidHostOut is shared by all tools/{base,build,swt} gradle projects/
ext.androidHostOut = file("$rootDir/../../out/host/gradle")
ext.androidRootDir = file(new File(ext.androidHostOut, "../../../"))
// rootProject.buildDir is specific to this gradle build.
buildDir = new File(file(ext.androidHostOut), "tools/base/build")

def getVersion(Project p, String baseVersion) {
    if (p.has("release")) {
        return baseVersion
    }

    return baseVersion + '-SNAPSHOT'
}

subprojects { Project project ->
    // Change buildDir first so that all plugins pick up the new value.
    project.buildDir = project.file("$project.parent.buildDir/../$project.name")

    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'signing'
    apply plugin: 'findbugs'
    apply plugin: 'distrib'

    repositories {
        mavenCentral()
    }

    distribution {
        destinationPath = "$rootDir/../../prebuilts/devtools/sdk/"
    }

    version = getVersion(project, '22.0')

    project.ext.sonatypeUsername = project.hasProperty('sonatypeUsername') ? sonatypeUsername : ""
    project.ext.sonatypePassword = project.hasProperty('sonatypePassword') ? sonatypePassword : ""

    // set all java compilation to use UTF-8 encoding.
    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    task disableTestFailures << {
        tasks.withType(Test) {
            ignoreFailures = true
        }
    }

    // custom tasks for creating source/javadoc jars
    task sourcesJar(type: Jar, dependsOn:classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn:javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    // add javadoc/source jar tasks as artifacts
    artifacts {
        archives jar

        archives sourcesJar
        archives javadocJar
    }

    task publishLocal(type: Upload) {
        configuration = configurations.archives
        repositories {
            mavenDeployer {
                repository(url: uri("$rootProject.ext.androidHostOut/repo"))
            }
        }
    }

    findbugs {
        ignoreFailures = true
        effort = "max"
        reportLevel = "high"
    }
}

// delay evaluation of this project before all subprojects have been evaluated.
subprojects.each { subproject -> evaluationDependsOn(subproject.name) }

def testTasks = subprojects.collect { it.tasks.withType(Test) }.flatten()

task aggregateResults(type: Copy) {
    from { testTasks*.testResultsDir }
    into { file("$buildDir/results") }
}