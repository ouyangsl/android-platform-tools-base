/*
 * Copyright (C) 2023 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id 'base'
    id 'com.android.tools.java-library'
    id 'com.android.tools.kotlin'
    id 'com.android.tools.publish'
    id 'java-gradle-plugin'
}

group = 'com.android.compose.screenshot'

base {
    archivesName = 'screenshot-test-gradle-plugin'
}

if (findProperty('hybrid-build-embedded-in-bazel')?.toBoolean()) {
    version = getProperty('SCREENSHOT_TEST_PLUGIN_VERSION')
} else {
    Properties properties = new Properties()
    File versionRootDir = rootDir
    String relativeVersionPath = 'base/preview/screenshot/release_version.bzl'
    File versionProperties = new File(versionRootDir, relativeVersionPath)
    versionProperties.withReader { properties.load(it) }
    if (findProperty('release')?.toBoolean()) {
        version = properties.getProperty('SCREENSHOT_TEST_PLUGIN_VERSION_RELEASE').replaceAll('"', '')
    } else {
        version = properties.getProperty('SCREENSHOT_TEST_PLUGIN_VERSION_DEV').replaceAll('"', '')
    }
}

def generateVersionPropertiesResourceFile = tasks.register('generateVersionPropertiesResourceFile') {
    def resourceFile = project.layout.buildDirectory.file("generated/resources/version.properties")
    outputs.file(resourceFile)

    doLast {
        resourceFile.get().asFile.parentFile.mkdirs()
        resourceFile.get().asFile.withWriter { writer ->
            writer.writeLine("buildVersion=$version")
        }
    }
}
sourcesJar.dependsOn generateVersionPropertiesResourceFile
processResources.dependsOn generateVersionPropertiesResourceFile

sourceSets {
    main {
        resources {
            srcDir(project.layout.buildDirectory.file("generated/resources"))
        }
    }
}

gradlePlugin {
    plugins {
        comAndroidComposeScreenshot {
            id = "com.android.compose.screenshot"
            implementationClass = "com.android.compose.screenshot.PreviewScreenshotGradlePlugin"
        }
    }
}

dependencies {
    compileOnly project(':base:gradle-api')
    compileOnly libs.com.android.tools.analyticsLibrary.protos
    compileOnly libs.com.android.tools.analyticsLibrary.shared
    compileOnly libs.com.android.tools.common
    implementation("com.android.tools.compose:compose-preview-renderer-model:$version")
    implementation libs.com.android.tools.compose.composePreviewDetector
    implementation libs.gson
    implementation libs.kxml
    testImplementation libs.junit
    testImplementation libs.truth
    testImplementation libs.truth_java8_extension
    testImplementation libs.kotlin_test
    testImplementation libs.mockito_core
    testImplementation libs.com.android.tools.testutils
    testImplementation project(':base:gradle-api')
    testImplementation project(':base:builder-test-api')
    testImplementation libs.com.android.tools.analyticsLibrary.protos
    testImplementation libs.com.android.tools.analyticsLibrary.shared
}

sourceSets {
    main.resources.srcDir 'src/main/java'
    test.resources.srcDir 'src/test/java'
}

project.ext.pomName = 'Screenshot testing for Compose Previews'
project.ext.pomDesc = 'Adding screenshot testing support for Compose Previews'

tasks.register('zipPlugin', Zip) {
    it.from(project(':base').localRepo)
    it.destinationDirectory = project(':base').androidHostDist
    it.archiveFileName = "repo.zip"
    it.dependsOn('publish')
}
