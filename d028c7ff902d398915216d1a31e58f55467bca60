{
  "comments": [
    {
      "key": {
        "uuid": "3cf1d5a2_3db65b07",
        "filename": "build-system/builder/src/main/java/com/android/builder/png/PngProcessor.java",
        "patchSetId": 11
      },
      "lineNbr": 43,
      "author": {
        "id": 1041553
      },
      "writtenOn": "2014-03-10T18:02:40Z",
      "side": 1,
      "message": "in this file, lots of i-1 style and lots of i - 1 style. I know Google force the i - 1 with spaces, not sure about android but it should be consistent.",
      "revId": "d028c7ff902d398915216d1a31e58f55467bca60",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9c2ba1c2_3e4dbd09",
        "filename": "build-system/builder/src/main/java/com/android/builder/png/PngProcessor.java",
        "patchSetId": 11
      },
      "lineNbr": 43,
      "author": {
        "id": 1001414
      },
      "writtenOn": "2014-03-10T20:56:43Z",
      "side": 1,
      "message": "yeah the original code seems inconsistent. I\u0027m fixing it.",
      "parentUuid": "3cf1d5a2_3db65b07",
      "revId": "d028c7ff902d398915216d1a31e58f55467bca60",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9c2ba1c2_fdb04f6d",
        "filename": "build-system/builder/src/main/java/com/android/builder/png/PngProcessor.java",
        "patchSetId": 11
      },
      "lineNbr": 81,
      "author": {
        "id": 1041553
      },
      "writtenOn": "2014-03-10T18:02:40Z",
      "side": 1,
      "message": "the whole code is a bit un-natural. \n\ncould it not be ? \n\nPngProcessor processor \u003d new PngProcessor();\nByteUtils byteUtils \u003d processor.read(from);\n\nPngWriter writer \u003d new PngWriter(to);\nwriter.setXXX.\n\nwriter.write(byteUtils);",
      "revId": "d028c7ff902d398915216d1a31e58f55467bca60",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3cf1d5a2_4308a488",
        "filename": "build-system/builder/src/main/java/com/android/builder/png/PngProcessor.java",
        "patchSetId": 11
      },
      "lineNbr": 81,
      "author": {
        "id": 1001414
      },
      "writtenOn": "2014-03-10T20:56:43Z",
      "side": 1,
      "message": "Yeah it\u0027s kinda crappy.\n\nbut returning it from read or passing it to write feel weird too. It\u0027s not like it\u0027s the result of the read or where to write to.\n\ni\u0027ve been toying with the idea of just using a ThreadLocal and using it inside both the processor and the writer so that it\u0027s independent from the API.",
      "parentUuid": "9c2ba1c2_fdb04f6d",
      "revId": "d028c7ff902d398915216d1a31e58f55467bca60",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dcf7d997_3ab65d07",
        "filename": "build-system/builder/src/main/java/com/android/builder/png/PngProcessor.java",
        "patchSetId": 11
      },
      "lineNbr": 86,
      "author": {
        "id": 1041553
      },
      "writtenOn": "2014-03-10T18:02:40Z",
      "side": 1,
      "message": "Preconditions.checkArgument() on both for early failure",
      "range": {
        "startLine": 86,
        "startChar": 15,
        "endLine": 86,
        "endChar": 16
      },
      "revId": "d028c7ff902d398915216d1a31e58f55467bca60",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dcf7d997_149b75a6",
        "filename": "build-system/builder/src/main/java/com/android/builder/png/PngProcessor.java",
        "patchSetId": 11
      },
      "lineNbr": 86,
      "author": {
        "id": 1001414
      },
      "writtenOn": "2014-03-10T20:56:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "dcf7d997_3ab65d07",
      "range": {
        "startLine": 86,
        "startChar": 15,
        "endLine": 86,
        "endChar": 16
      },
      "revId": "d028c7ff902d398915216d1a31e58f55467bca60",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9c2ba1c2_dd28ebaf",
        "filename": "build-system/builder/src/main/java/com/android/builder/png/PngProcessor.java",
        "patchSetId": 11
      },
      "lineNbr": 183,
      "author": {
        "id": 1041553
      },
      "writtenOn": "2014-03-10T18:02:40Z",
      "side": 1,
      "message": "this method is really long, it would help understanding if you could break in into smaller methods.",
      "revId": "d028c7ff902d398915216d1a31e58f55467bca60",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3cf1d5a2_03169ca4",
        "filename": "build-system/builder/src/main/java/com/android/builder/png/PngProcessor.java",
        "patchSetId": 11
      },
      "lineNbr": 183,
      "author": {
        "id": 1001414
      },
      "writtenOn": "2014-03-10T20:56:43Z",
      "side": 1,
      "message": "It\u0027s long because it\u0027s ported from the cpp version of aapt and I\u0027d like to keep it close for now.",
      "parentUuid": "9c2ba1c2_dd28ebaf",
      "revId": "d028c7ff902d398915216d1a31e58f55467bca60",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3cf1d5a2_e2c42ed7",
        "filename": "build-system/builder/src/main/java/com/android/builder/png/PngWriter.java",
        "patchSetId": 11
      },
      "lineNbr": 88,
      "author": {
        "id": 1041553
      },
      "writtenOn": "2014-03-10T18:02:40Z",
      "side": 1,
      "message": "why copying the entire file into memory, it seems it would be less prone to OOM to have chunks saving themselves to an OutputStream/Writer interface ?",
      "revId": "d028c7ff902d398915216d1a31e58f55467bca60",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dcf7d997_d4772da5",
        "filename": "build-system/builder/src/main/java/com/android/builder/png/PngWriter.java",
        "patchSetId": 11
      },
      "lineNbr": 88,
      "author": {
        "id": 1001414
      },
      "writtenOn": "2014-03-10T20:56:43Z",
      "side": 1,
      "message": "Those are typically small images, and I like just using Files.write() but you\u0027re right. I\u0027ll fix this.",
      "parentUuid": "3cf1d5a2_e2c42ed7",
      "revId": "d028c7ff902d398915216d1a31e58f55467bca60",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3cf1d5a2_9da66fd2",
        "filename": "build-system/builder/src/main/java/com/android/builder/png/PngWriter.java",
        "patchSetId": 11
      },
      "lineNbr": 103,
      "author": {
        "id": 1041553
      },
      "writtenOn": "2014-03-10T18:02:40Z",
      "side": 1,
      "message": "this really seem to access a lof of Chunk\u0027s internal (getData(), getCrc32()). this should be moved into Chunk class itself.",
      "range": {
        "startLine": 103,
        "startChar": 16,
        "endLine": 103,
        "endChar": 26
      },
      "revId": "d028c7ff902d398915216d1a31e58f55467bca60",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dcf7d997_3ab5bdd2",
        "filename": "build-system/builder/src/main/java/com/android/builder/png/PngWriter.java",
        "patchSetId": 11
      },
      "lineNbr": 136,
      "author": {
        "id": 1041553
      },
      "writtenOn": "2014-03-10T18:02:40Z",
      "side": 1,
      "message": "what do these 3 x 4 means ? One is the chunk signature, one is the CRC ?",
      "range": {
        "startLine": 136,
        "startChar": 35,
        "endLine": 136,
        "endChar": 36
      },
      "revId": "d028c7ff902d398915216d1a31e58f55467bca60",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dcf7d997_346951d0",
        "filename": "build-system/builder/src/main/java/com/android/builder/png/PngWriter.java",
        "patchSetId": 11
      },
      "lineNbr": 136,
      "author": {
        "id": 1001414
      },
      "writtenOn": "2014-03-10T20:56:43Z",
      "side": 1,
      "message": "I should move this to the chunk.",
      "parentUuid": "dcf7d997_3ab5bdd2",
      "range": {
        "startLine": 136,
        "startChar": 35,
        "endLine": 136,
        "endChar": 36
      },
      "revId": "d028c7ff902d398915216d1a31e58f55467bca60",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dcf7d997_1a8c4123",
        "filename": "build-system/builder/src/main/java/com/android/builder/png/TickException.java",
        "patchSetId": 11
      },
      "lineNbr": 34,
      "author": {
        "id": 1041553
      },
      "writtenOn": "2014-03-10T18:02:40Z",
      "side": 1,
      "message": "I personally like Optional\u003c\u003e a lot. forces all users to check for existence on the getter. (I tend to forget : if xxx !\u003d null a lot...",
      "revId": "d028c7ff902d398915216d1a31e58f55467bca60",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dcf7d997_1a5281a5",
        "filename": "build-system/builder/src/main/java/com/android/builder/png/TickException.java",
        "patchSetId": 11
      },
      "lineNbr": 34,
      "author": {
        "id": 1004689
      },
      "writtenOn": "2014-03-10T18:08:58Z",
      "side": 1,
      "message": "Just FYI in the tools we\u0027re relying heavily on null annotations (@NonNull, @Nullable, and the excellent support in IntelliJ to flag these). Thus this field should be annotated @Nullable, and any usage which doesn\u0027t check will get flagged.",
      "parentUuid": "dcf7d997_1a8c4123",
      "revId": "d028c7ff902d398915216d1a31e58f55467bca60",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dcf7d997_a5219284",
        "filename": "build-system/builder/src/main/java/com/android/builder/png/TickException.java",
        "patchSetId": 11
      },
      "lineNbr": 34,
      "author": {
        "id": 1041553
      },
      "writtenOn": "2014-03-10T18:53:14Z",
      "side": 1,
      "message": "yes but those yellow (or red !)  lines are ignorable. As long as we don\u0027t have checkNotNull unit test that would fail, I think the annotation is relying a bit too much on the engineer to do the right thing. Neither Gerrit or unit tests will flag those, it\u0027s a bit insufficient,. As a reviewer I fee unconfident to ensure there are no easy potential NPE lurking since I cannot check it myself outside of doing what the IDE does, checking all callers etc etc...",
      "parentUuid": "dcf7d997_1a5281a5",
      "revId": "d028c7ff902d398915216d1a31e58f55467bca60",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dcf7d997_8ab3becb",
        "filename": "build-system/builder/src/main/java/com/android/builder/png/TickException.java",
        "patchSetId": 11
      },
      "lineNbr": 34,
      "author": {
        "id": 1004689
      },
      "writtenOn": "2014-03-10T23:00:25Z",
      "side": 1,
      "message": "When the information is recorded on the APIs this way, we can statically determine whether accessor code is correct; we don\u0027t need to check that over and over again at runtime.\n\nBut we do have that option. In IntelliJ, at buildtime, they run an annotation processor which inserts code in every single method which checks that @NotNull parameters really are not null on entry, and that all return values really are not null if the return value is marked @NotNull.",
      "parentUuid": "dcf7d997_a5219284",
      "revId": "d028c7ff902d398915216d1a31e58f55467bca60",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fcfadd80_529b5460",
        "filename": "build-system/builder/src/main/java/com/android/builder/png/TickException.java",
        "patchSetId": 11
      },
      "lineNbr": 34,
      "author": {
        "id": 1001414
      },
      "writtenOn": "2014-03-10T23:19:31Z",
      "side": 1,
      "message": "This only works for libraries that are built by IJ, which is not the case of the gradle plugin or some of its library (like this one -- Builder). We should find a way to run the static analysis and break the build somehow.",
      "parentUuid": "dcf7d997_8ab3becb",
      "revId": "d028c7ff902d398915216d1a31e58f55467bca60",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9c2ba1c2_08f99a60",
        "filename": "build-system/builder/src/main/java/com/android/builder/png/TickException.java",
        "patchSetId": 11
      },
      "lineNbr": 34,
      "author": {
        "id": 1004689
      },
      "writtenOn": "2014-03-10T23:31:30Z",
      "side": 1,
      "message": "There is an \"inspect.sh\" script which ships with IntelliJ for running its inspections against a code base from the command line. I tried it earlier and couldn\u0027t get it to work. I just asked Dmitry about it and he suggested I ignore the documentation\u0027s explanation to use the .idea subfolder. Let me try it and see if I can get it to work.\n\n(Note however that this isn\u0027t something requiring fancy IntelliJ support; it\u0027s just an annotation processor which looks at annotations and inserts null checks for each parameter; it probably wouldn\u0027t be hard to put this together for a gradle plugin too. That might be useful in general!)",
      "parentUuid": "fcfadd80_529b5460",
      "revId": "d028c7ff902d398915216d1a31e58f55467bca60",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}