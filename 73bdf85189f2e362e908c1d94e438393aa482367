{
  "comments": [
    {
      "key": {
        "uuid": "6a4e2058_59eae513",
        "filename": "lint/libs/lint-api/src/main/java/com/android/tools/lint/detector/api/Speed.java",
        "patchSetId": 3
      },
      "lineNbr": 40,
      "author": {
        "id": 1017944
      },
      "writtenOn": "2014-05-16T14:46:43Z",
      "side": 1,
      "message": "Is there an official meaning for these values? The difference between SLOW and REALLY_SLOW isn\u0027t really apparent, other than one is slower than the other ;)",
      "range": {
        "startLine": 40,
        "startChar": 4,
        "endLine": 40,
        "endChar": 15
      },
      "revId": "73bdf85189f2e362e908c1d94e438393aa482367",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dff7d045_7def77da",
        "filename": "lint/libs/lint-api/src/main/java/com/android/tools/lint/detector/api/Speed.java",
        "patchSetId": 3
      },
      "lineNbr": 40,
      "author": {
        "id": 1004689
      },
      "writtenOn": "2014-05-16T14:56:49Z",
      "side": 1,
      "message": "There isn\u0027t an official meaning. It\u0027s currently not used, but my thinking was that the *automatic* running of certain checks would be gated on the runtime performance of the checks. For example, checks which are marked as slow, shouldn\u0027t run in the editor, at least not in modes where the user is asking for less analysis (take a look at Hector the Inspector in the bottom right corner of IntelliJ). Similarly, I can imagine running certain checks less often; e.g. the fast checks basically every few keystrokes, but slower ones maybe only on file save, and really slow ones only when explicitly requested.\n\nP.S. Hector the Inspector? Yes! http://blogs.jetbrains.com/yole/archives/000083.html",
      "parentUuid": "6a4e2058_59eae513",
      "range": {
        "startLine": 40,
        "startChar": 4,
        "endLine": 40,
        "endChar": 15
      },
      "revId": "73bdf85189f2e362e908c1d94e438393aa482367",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fffad42e_a1bdd8f1",
        "filename": "lint/libs/lint-checks/src/main/java/com/android/tools/lint/checks/GradleDetector.java",
        "patchSetId": 3
      },
      "lineNbr": 465,
      "author": {
        "id": 1017944
      },
      "writtenOn": "2014-05-16T14:46:43Z",
      "side": 1,
      "message": "It would be nice in the IntelliJ usage of this check to use the built-in index instead of going out to MavenCentral -- the index is there, we may as well use it, and it would be fast enough that we could consider running this check a lot more often. Perhaps rework this architecture to generalize the mechanism for getting the latest version?",
      "range": {
        "startLine": 465,
        "startChar": 32,
        "endLine": 465,
        "endChar": 48
      },
      "revId": "73bdf85189f2e362e908c1d94e438393aa482367",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dff7d045_dd544bdb",
        "filename": "lint/libs/lint-checks/src/main/java/com/android/tools/lint/checks/GradleDetector.java",
        "patchSetId": 3
      },
      "lineNbr": 465,
      "author": {
        "id": 1004689
      },
      "writtenOn": "2014-05-16T14:56:49Z",
      "side": 1,
      "message": "Having it use an index would slightly defeat the purpose of this check, which is to see if there are any new available versions available (I don\u0027t know how often the Maven index is kept up to date in IntelliJ). Note that the check is disabled by default, so this is typically something people would run occasionally with \nenable \"NewerVersionAvailable\".\n\nThere is a separate lint check which is much faster which uses a hardcoded list of dependencies as well as checking local maven repositories; that\u0027s where we make sure you\u0027re using the latest build tools, the latest play services etc. That check would be really useful with the maven index. It would be straightforward to let the IntelliJ subclass of this detector consult the index for its enabled, quick look up of dependencies.",
      "parentUuid": "fffad42e_a1bdd8f1",
      "range": {
        "startLine": 465,
        "startChar": 32,
        "endLine": 465,
        "endChar": 48
      },
      "revId": "73bdf85189f2e362e908c1d94e438393aa482367",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dff7d045_bd7dffc2",
        "filename": "lint/libs/lint-checks/src/main/java/com/android/tools/lint/checks/GradleDetector.java",
        "patchSetId": 3
      },
      "lineNbr": 465,
      "author": {
        "id": 1017944
      },
      "writtenOn": "2014-05-16T16:57:54Z",
      "side": 1,
      "message": "It of course wouldn\u0027t defeat the purpose of the check if the index were kept up-to-date, but I just had a look at the code, and by my reading of it, the index is never automatically updated. You can update it manually via Preferences \u003e Maven  \u003e Repositories (there\u0027s an update button), but we\u0027ve removed that panel from Android Studio (it\u0027s part of the Maven preferences which otherwise don\u0027t apply), so you can\u0027t even get at it. We should perhaps revisit that, but nevertheless it\u0027s unfortunate that this index gets built, by default, at very great expense and is then left to go stale unless you manually kick it via an obscure setting. Perhaps I should rethink my use of it in the dependencies dialog (there\u0027s already a bug filed against me about it being stale). It\u0027s a shame because the net-based lookup of dependencies, at least with the default settings for repositories, is TERRIBLY slow -- on the order of 10+ seconds per lookup.",
      "parentUuid": "dff7d045_dd544bdb",
      "range": {
        "startLine": 465,
        "startChar": 32,
        "endLine": 465,
        "endChar": 48
      },
      "revId": "73bdf85189f2e362e908c1d94e438393aa482367",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6a4e2058_28f94863",
        "filename": "lint/libs/lint-checks/src/main/java/com/android/tools/lint/checks/GradleDetector.java",
        "patchSetId": 3
      },
      "lineNbr": 465,
      "author": {
        "id": 1004689
      },
      "writtenOn": "2014-05-16T18:27:19Z",
      "side": 1,
      "message": "I wonder if we should abandon the index for now. At least for explicit user searches in the project structure dialog (IntelliJ might be using it for other stuff, like highlighting unknown repository artifacts in the editor in the background etc. where they really do need to persist the queries.)\n\nI looked into the maven central search APIs for this lint check, and they\u0027re both simple and fast. Take a look at http://search.maven.org/#api .\n\n For example, to search for any artifact named \"guava\", use\nhttp://search.maven.org/solrsearch/select?q\u003da:\"guava\"\u0026rows\u003d20\u0026wt\u003djson\n\nTo mimic searching in the Maven Central search box, just use q: instead of a:, which is probably what we\u0027d want where we\u0027re not certain what kind of thing we\u0027re searching for (artifact, group, etc):\nhttp://search.maven.org/solrsearch/select?q\u003dguava\u0026rows\u003d20\u0026wt\u003djson\n\nFor me, the result is nearly instant (under a second). And is delivered as json, which is super easy to parse.\n\nIf the index is out of date, or in my case, for some reason missing (see issue 69629), it might be better to rely on up to date direct searches.",
      "parentUuid": "dff7d045_bd7dffc2",
      "range": {
        "startLine": 465,
        "startChar": 32,
        "endLine": 465,
        "endChar": 48
      },
      "revId": "73bdf85189f2e362e908c1d94e438393aa482367",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fffad42e_447bc299",
        "filename": "lint/libs/lint-checks/src/main/java/com/android/tools/lint/checks/GradleDetector.java",
        "patchSetId": 3
      },
      "lineNbr": 468,
      "author": {
        "id": 1017944
      },
      "writtenOn": "2014-05-16T16:57:54Z",
      "side": 1,
      "message": "I often prefer String.format for this sort of thing though it\u0027s more a matter of personal style.",
      "range": {
        "startLine": 468,
        "startChar": 14,
        "endLine": 468,
        "endChar": 20
      },
      "revId": "73bdf85189f2e362e908c1d94e438393aa482367",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dff7d045_bd585f65",
        "filename": "lint/libs/lint-checks/src/main/java/com/android/tools/lint/checks/GradleDetector.java",
        "patchSetId": 3
      },
      "lineNbr": 472,
      "author": {
        "id": 1017944
      },
      "writtenOn": "2014-05-16T16:57:54Z",
      "side": 1,
      "message": "Nit: you could have one try-catch block for both UnsupportedEncodingExceptions.",
      "range": {
        "startLine": 472,
        "startChar": 15,
        "endLine": 472,
        "endChar": 16
      },
      "revId": "73bdf85189f2e362e908c1d94e438393aa482367",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fffad42e_44486272",
        "filename": "lint/libs/lint-checks/src/main/java/com/android/tools/lint/checks/GradleDetector.java",
        "patchSetId": 3
      },
      "lineNbr": 521,
      "author": {
        "id": 1017944
      },
      "writtenOn": "2014-05-16T16:57:54Z",
      "side": 1,
      "message": "Couldn\u0027t you just use a regex to parse this? Something on the order of \"response\".*\"v\":\\w*\"([^\"]+)\". You could then pull out the value via the group in the regex.\n\nI suppose it\u0027s a valid point whether the regex is easier to read and more maintainable than Java code ;)",
      "range": {
        "startLine": 521,
        "startChar": 20,
        "endLine": 521,
        "endChar": 28
      },
      "revId": "73bdf85189f2e362e908c1d94e438393aa482367",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}