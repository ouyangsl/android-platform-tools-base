/*
* Copyright (C) 2018 The Android Open Source Project
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*      http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
syntax = "proto3";

package profiler.proto;
option java_package = "com.android.tools.profiler.proto";
option java_outer_classname = "Trace";

import "protos/perfetto/config/perfetto_config.proto";

message TraceStartStatus {
  enum Status {
    UNSPECIFIED = 0;
    SUCCESS = 1;
    FAILURE = 2;
  }

  Status status = 1;
  string error_message = 2;
  // The time at which the trace was started (in nanoseconds).
  int64 start_time_ns = 3;
}

message TraceStopStatus {
  enum Status {
    UNSPECIFIED = 0;
    SUCCESS = 1;
    NO_ONGOING_PROFILING = 2;
    APP_PROCESS_DIED = 3;
    APP_PID_CHANGED = 4;
    PROFILER_PROCESS_DIED = 5;
    STOP_COMMAND_FAILED = 6;
    STILL_PROFILING_AFTER_STOP = 7;
    CANNOT_START_WAITING = 8;
    WAIT_TIMEOUT = 9;
    WAIT_FAILED = 10;
    CANNOT_READ_WAIT_EVENT = 11;
    CANNOT_COPY_FILE = 12;
    CANNOT_FORM_FILE = 13;
    CANNOT_READ_FILE = 14;
    // Generic failure status for non-defined failures.
    OTHER_FAILURE = 15;
  }

  Status status = 1;
  string error_message = 2;
  // The time taken (i.e. elapsed duration) to stop the trace (in nanoseconds).
  int64 stopping_duration_ns = 3;
}


message TraceStatusData {
  oneof union {
    TraceStartStatus trace_start_status = 1;
    TraceStopStatus trace_stop_status = 2;
  }
}

enum TraceMode {
  UNSPECIFIED_MODE = 0;
  SAMPLED = 1;
  INSTRUMENTED = 2;
}

enum TraceInitiationType {
  UNSPECIFIED_INITIATION = 0;
  INITIATED_BY_UI = 1;  // specifically means non-startup UI operations.
  INITIATED_BY_API = 2;
  INITIATED_BY_STARTUP = 3;
}

// Configuration information for taking a trace. This includes a union of fields
// needed for all tracing technology configurations. A TraceType enum is included to
// be able to differentiate which technology is used.
// TODO (b/258515754): remove this proto and replace it with new tech-based options.
message UserOptions {
  enum TraceType {
    UNSPECIFIED_TYPE = 0;
    ART = 1;
    SIMPLEPERF = 2;
    ATRACE = 3;
    PERFETTO = 4;
  }

  // Name of the configuration. For Studio-side display only.
  string name = 1;

  // The mode of tracing can be either sampled or instrumented.
  TraceMode trace_mode = 2;

  // Type of tracing technology used.
  TraceType trace_type = 3;

  // When using ATrace/Perfetto, the size of the buffer that holds tracing
  // data.
  int32 buffer_size_in_mb = 4;

  // When using sampling, the sampling interval in microseconds.
  int32 sampling_interval_us = 5;
}

// The configuration for taking a trace. This includes configuration information
// specific to one tracing technology out of Art, Atrace, Simpleperf, and Perfetto.
// Along with that comes configuration information that is agnostic of the technology
// used such as the path to the trace file produced.
message TraceConfiguration {
  // The name of the app to be traced. Most if not all trace modes supports the
  // app_name as the input instead pid. In the case of startup profiling, we
  // don't know the pid anyway, so we use the app's name for all scenarios
  // instead.
  string app_name = 1;

  // ABI CPU architecture of the simpleperf/perfetto binary to use. This
  // should match the arch of the device and should be one of the
  // values defined by SdkConstants.CPU_ARCH_*, e.g. 'arm', 'arm64', 'x86'.
  string abi_cpu_arch = 2;

  // The device path to output the trace to. Generated by Studio unless for the
  // case of initiation_type == |INITIATED_BY_API| which does not need to
  // specify a path. Note that this is a only for temp storage. A completed
  // trace will be made available via the |GetBytes| rpc using the trace id as
  // the byte's id.
  string temp_path = 3;

  // The method in which the trace was initiated. This is needed to tell if
  // tracing was initiated via API, UI, or on startup as the trace configuration
  // will be handled differently for the respective initiation type.
  TraceInitiationType initiation_type = 4;

  // One option field will be set depending on the type of technology used for the trace.
  // These options have all the fields/data needed for the respective technology.
  oneof union {
    ArtOptions art_options = 5;
    AtraceOptions atrace_options = 6;
    SimpleperfOptions simpleperf_options = 7;
    // Utilizes Perfetto's defined TraceConfig proto
    perfetto.protos.TraceConfig perfetto_options = 8;
  }
}

// The options for a Simpleperf-based trace.
message SimpleperfOptions {
  // When using sampling, the sampling interval in microseconds.
  int32 sampling_interval_us = 1;

  // The host path to symbols for this trace. This is passed in by studio
  // and used by the simpleperf preprocessor to properly symbolize the trace.
  // The symbolized trace is then saved in the datastore.
  repeated string symbol_dirs = 2;
}

// The options for a Atrace-based trace.
message AtraceOptions {
  // The size of the buffer that holds tracing data.
  int32 buffer_size_in_mb = 1;
}

// The options for a Art-based trace.
message ArtOptions {
  // When using sampling, the sampling interval in microseconds.
  int32 sampling_interval_us = 1;

  // The size of the buffer that holds tracing data.
  int32 buffer_size_in_mb = 2;

  // The mode of tracing can be either sampled or instrumented.
  // Art-based traces can be either.
  TraceMode trace_mode = 3;
}