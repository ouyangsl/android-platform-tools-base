/*
* Copyright (C) 2018 The Android Open Source Project
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*      http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
syntax = "proto3";

package profiler.proto;
option java_package = "com.android.tools.profiler.proto";
option java_outer_classname = "Trace";

import "protos/perfetto/config/perfetto_config.proto";

// A TraceInfo contains the information regarding a trace
// and should be returned if its time overlaps with the request time range.
message TraceInfo {
  int64 trace_id = 1;
  int64 from_timestamp = 2;  // inclusive
  int64 to_timestamp = 3;    // inclusive
  TraceConfiguration configuration = 4;
  TraceStartStatus start_status = 5;
  TraceStopStatus stop_status = 6;
}

// A TraceData contains a TraceInfo message, wrapped in either
// a TraceStarted or TraceEnded message to indicate whether the
// data is tied to the start or end of a trace. This is the data
// type tied to a cpu and memory trace events.
message TraceData {
  message TraceStarted {
    TraceInfo trace_info = 1;
  }

  message TraceEnded {
    TraceInfo trace_info = 1;
  }

  oneof union {
    TraceStarted trace_started = 1;
    TraceEnded trace_ended = 2;
  }
}

message TraceStartStatus {
  enum Status {
    UNSPECIFIED = 0;
    SUCCESS = 1;
    FAILURE = 2;
  }

  // Each enum value must be an integer with at most 1 bit set in the binary format.
  enum ErrorCode {
   // No error during trace start
   NO_ERROR_TRACE_START = 0; // 0x0000
   // No trace type specified
   NO_TRACE_TYPE_SPECIFIED = 1; // 0x0001
   // App is already being profiled with ART
   APP_ALREADY_PROFILED_WITH_ART = 2; // 0x0002
   // Unable to run profile start command
   UNABLE_TO_RUN_PROFILE_START = 4; // 0x0004
   // Requested buffer size is too small
   REQUESTED_BUFFER_SIZE_TOO_SMALL = 8; // 0x0008
   // Failed to run atrace start.
   FAILED_TO_RUN_ATRACE_START = 16; // 0x0010
   // Atrace could not allocate enough memory to record a trace.
   ATRACE_NOT_ALLOCATE_MEMORY_TO_RECORD_TRACE = 32; // 0x0020
   // Perfetto is already running unable to start new trace.
   PERFETTO_ALREADY_RUNNING_UNABLE_START_NEW_TRACE = 64; // 0x0040
   // Tracer is already running unable to run perfetto.
   TRACER_ALREADY_RUNNING_UNABLE_RUN_PERFETTO = 128; // 0x0080
   // Failed to launch perfetto.
   FAILED_TO_LAUNCH_PERFETTO =  256; // 0x0100
   // Failed to launch tracer.
   FAILED_TO_LAUNCH_TRACER = 512; // 0x0200
   // Failed to launch traced.
   FAILED_TO_LAUNCH_TRACED = 1024; // 0x0400
   // Failed to launch traced_probes.
   FAILED_TO_LAUNCH_TRACED_PROBES = 2048; // 0x0800
   // Simpleperf is already running; start tracing failed.
   SIMPLEPREF_ALREADY_RUNNING = 4096; // 0x1000
   // Unable to get process id to profile.
   UNABLE_TO_GET_PROCESS_ID_TO_PROFILE = 8192; // 0x2000
   // Unable to setprop to enable profiling.
   UNABLE_TO_SETPROP_TO_ENABLE_PROFILING = 16384; // 0x4000
   // Unable to create(fork) simpleperf process
   UNABLE_TO_CREATE_FORK_SIMPLEPREF = 32768; // 0x8000
   // Ongoing capture already exists
   ONGOING_CAPTURE_EXISTS = 65536; // 0x10000
   // No technology-specific tracing options set.
   NO_TRACING_OPTIONS_SET = 131072; // 0x20000
}

  Status status = 1;
  string error_message = 4; // TODO: Usage is in idea. Will be removed in upcoming CL.
  int64 error_code = 2;
  // The time at which the trace was started (in nanoseconds).
  int64 start_time_ns = 3;
}

message TraceStopStatus {
  enum Status {
    UNSPECIFIED = 0;
    SUCCESS = 1;
    NO_ONGOING_PROFILING = 2;
    APP_PROCESS_DIED = 3;
    APP_PID_CHANGED = 4;
    PROFILER_PROCESS_DIED = 5;
    STOP_COMMAND_FAILED = 6;
    STILL_PROFILING_AFTER_STOP = 7;
    CANNOT_START_WAITING = 8;
    WAIT_TIMEOUT = 9;
    WAIT_FAILED = 10;
    CANNOT_READ_WAIT_EVENT = 11;
    CANNOT_COPY_FILE = 12;
    CANNOT_FORM_FILE = 13;
    CANNOT_READ_FILE = 14;
    // Generic failure status for non-defined failures.
    OTHER_FAILURE = 15;
  }

  // Each enum value must be an integer with at most 1 bit set in the binary format.
  enum ErrorCode {
   NO_ERROR_TRACE_STOP = 0; // 0x0000
   // Failed to read trace from device
   FAILED_TO_READ_TRACE_FROM_DEVICE = 1; // 0x0001
   // Unable to monitor trace file for completion
   UNABLE_TO_MONITOR_TRACE_FILE_FOR_COMPLETION = 2; // 0x0002
   // Unable to run profile stop command
   UNABLE_TO_RUN_PROFILE_STOP = 4; // 0x0004
   // Cannot read events while waiting for ART trace file.
   CANNOT_READ_WHILE_WAITING_FOR_ART_TRACE_FILE = 8; // 0x0008
   // Wait for ART trace file failed.
   WAIT_FOR_ART_TRACE_FILE_FAILED = 16; // 0x0010
   // Wait for ART trace file timed out.
   WAIT_FOR_ART_TRACE_FILE_TIMED_OUT = 32; // 0x0020
   // Failed to stop atrace.
   FAILED_TO_STOP_ATRACE = 64; // 0x0040
   // Failed to stop tracer.
   FAILED_TO_STOP_TRACER = 128; // 0x0080
   // Failed to stop perfetto.
   FAILED_TO_STOP_PERFETTO = 256; // 0x0100
   // This app was not being profiled.
   APP_WAS_NOT_BEING_PROFILED = 512; // 0x0200
   // App died since profiling started.
   APP_DIED_SINCE_PROFILEING_STARTED = 1024; // 0x0400
   // Recorded pid and current app pid do not match
   RECORDED_PIP_AND_CURRENT_APP_PID_DO_NOT_MATCH = 2048; // 0x0800
   // Failed to send SIGTERM to simpleperf
   FAILED_TO_SEND_SIGTERM_TO_SIMPLEPREF =4096; // 0x1000
   // Unable to copy simpleperf raw trace.
   UNABLE_TO_COPY_SIMPLEPREF_RAW_TRACE = 8192; // 0x2000
   // waitpid failed with message
   WAIT_PID_FAILED = 16384; // 0x4000
   // Simpleperf did not exit as expected.
   SIMPLE_PREF_NOT_EXIT_AS_EXPECTED = 32768; // 0x8000
   // No ongoing capture exists
   NO_ONGOING_CAPTURE = 65536; // 0x10000
   // No technology-specific tracing options found on trace stoppage.
   NO_TRACING_OPTIONS_FOUND = 131072; // 0x20000
   // No trace type specified
   NO_TRACE_TYPE_SPECIFIED_STOP = 262144; // 0x40000
}

  Status status = 1;
  string error_message = 4; // TODO: Usage is in idea. Will be removed in upcoming CL.
  int64 error_code = 2;
  // The time taken (i.e. elapsed duration) to stop the trace (in nanoseconds).
  int64 stopping_duration_ns = 3;
}


message TraceStatusData {
  oneof union {
    TraceStartStatus trace_start_status = 1;
    TraceStopStatus trace_stop_status = 2;
  }
}

enum TraceMode {
  UNSPECIFIED_MODE = 0;
  SAMPLED = 1;
  INSTRUMENTED = 2;
}

enum TraceInitiationType {
  UNSPECIFIED_INITIATION = 0;
  INITIATED_BY_UI = 1;  // specifically means non-startup UI operations.
  INITIATED_BY_API = 2;
  INITIATED_BY_STARTUP = 3;
}

// The configuration for taking a trace. This includes configuration information
// specific to one tracing technology out of Art, Atrace, Simpleperf, and Perfetto.
// Along with that comes configuration information that is agnostic of the technology
// used such as the path to the trace file produced.
message TraceConfiguration {
  // The name of the app to be traced. Most if not all trace modes supports the
  // app_name as the input instead pid. In the case of startup profiling, we
  // don't know the pid anyway, so we use the app's name for all scenarios
  // instead.
  string app_name = 1;

  // ABI CPU architecture of the simpleperf/perfetto binary to use. This
  // should match the arch of the device and should be one of the
  // values defined by SdkConstants.CPU_ARCH_*, e.g. 'arm', 'arm64', 'x86'.
  string abi_cpu_arch = 2;

  // The device path to output the trace to. Generated by Studio unless for the
  // case of initiation_type == |INITIATED_BY_API| which does not need to
  // specify a path. Note that this is a only for temp storage. A completed
  // trace will be made available via the |GetBytes| rpc using the trace id as
  // the byte's id.
  string temp_path = 3;

  // The method in which the trace was initiated. This is needed to tell if
  // tracing was initiated via API, UI, or on startup as the trace configuration
  // will be handled differently for the respective initiation type.
  TraceInitiationType initiation_type = 4;

  // One option field will be set depending on the type of technology used for the trace.
  // These options have all the fields/data needed for the respective technology.
  oneof union {
    ArtOptions art_options = 5;
    AtraceOptions atrace_options = 6;
    SimpleperfOptions simpleperf_options = 7;
    // Utilizes Perfetto's defined TraceConfig proto
    perfetto.protos.TraceConfig perfetto_options = 8;
  }
}

// The options for a Simpleperf-based trace.
message SimpleperfOptions {
  // When using sampling, the sampling interval in microseconds.
  int32 sampling_interval_us = 1;

  // The host path to symbols for this trace. This is passed in by studio
  // and used by the simpleperf preprocessor to properly symbolize the trace.
  // The symbolized trace is then saved in the datastore.
  repeated string symbol_dirs = 2;
}

// The options for a Atrace-based trace.
message AtraceOptions {
  // The size of the buffer that holds tracing data.
  int32 buffer_size_in_mb = 1;
}

// The options for a Art-based trace.
message ArtOptions {
  // When using sampling, the sampling interval in microseconds.
  int32 sampling_interval_us = 1;

  // The size of the buffer that holds tracing data.
  int32 buffer_size_in_mb = 2;

  // The mode of tracing can be either sampled or instrumented.
  // Art-based traces can be either.
  TraceMode trace_mode = 3;
}

// The profiler type of trace being taken. Used to differentiate
// between start/stop trace command sources and determine the
// correct respective trace event kind to send.
// TODO (b/263903182): Refactor studio & base side to have start/stop
// trace commands be ProfilerType-agnostic.
enum ProfilerType {
  UNSPECIFIED = 0;
  CPU = 1;
  MEMORY = 2;
}

// The command to initiate a trace/capture. 
// It contains metadata for api initiated tracing and configuration 
// information for the trace to be captured. 
message StartTrace {
  // Agent is responsible for providing these additional info for API-
  // initiated tracing.
  message ApiStartTracingMetaData {
    int64 start_timestamp = 1;
  }
  TraceConfiguration configuration = 1;
  // Set only if configuration's initiation_type is |INITIATED_BY_API|.
  ApiStartTracingMetaData api_start_metadata = 2;
  // Set to identify which profiler will initiates this command.
  ProfilerType profiler_type = 4;
}

// The command to terminate an ongoing trace/capture. 
// It contains metadata for api initiated tracing and configuration 
// information for the ongoing capture it is sent to terminate.
message StopTrace {
  // Agent is responsible for providing these additional info for API-
  // initiated tracing.
  message ApiStopTracingMetaData {
    int64 stop_timestamp = 1;
    // A name of trace's content that's unique during the lifetime of the
    // process. The daemon is responsible for storing the content in the generic
    // cache that can be referenced via the trace's id.
    string trace_name = 2;
  }
  TraceConfiguration configuration = 1;
  // Set only if configuration's initiation_type is |INITIATED_BY_API|.
  ApiStopTracingMetaData api_stop_metadata = 2;
  // Whether the command needs to wait and parse the trace content.
  bool need_trace_response = 3;
  // Set to identify which profiler initiates this command.
  ProfilerType profiler_type = 4;
}