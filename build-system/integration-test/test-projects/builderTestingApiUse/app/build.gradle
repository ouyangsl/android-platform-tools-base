apply plugin: 'com.android.application'

project.ext.fakeProvider = new com.android.tests.basic.buildscript.FakeProvider()
project.ext.fakeServer = new com.android.tests.basic.buildscript.FakeServer()

android {
    namespace "com.android.tests.testprojecttest.app"
    testNamespace "com.android.tests.testprojecttest.test"
    compileSdkVersion rootProject.latestCompileSdk
    buildToolsVersion = rootProject.buildToolsVersion

    deviceProvider project.fakeProvider
    testServer project.fakeServer

    buildTypes {
        debug {
            testCoverageEnabled true
        }
    }

    defaultConfig {
        minSdkVersion libs.versions.supportLibMinSdk.get()
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
}

project.afterEvaluate {
    configure(fakeDebugAndroidTest) {
        doLast {
            String error = project.fakeProvider.isValid()
            if (error != null) {
                throw new GradleException("Failed DeviceProvider usage: " + error)
            }
        }
        notCompatibleWithConfigurationCache("Use project instance in doLast block")
    }

    configure(fake2Upload) {
        doLast {
            String error = project.fakeServer.isValid()
            if (error != null) {
                throw new GradleException("Failed TestServer usage: " + error)
            }
        }
        notCompatibleWithConfigurationCache("Use project instance in doLast block")
    }
}

dependencies {
    api project(':lib')
    androidTestImplementation "com.android.support.test:runner:${libs.versions.testSupportLibVersion.get()}"
    androidTestImplementation "com.android.support.test:rules:${libs.versions.testSupportLibVersion.get()}"
}
