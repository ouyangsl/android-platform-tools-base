import com.android.build.OutputFile

apply from: "../commonHeader.gradle"
buildscript { apply from: "../commonBuildScript.gradle" }

apply plugin: 'com.android.application'

android {
  namespace "com.android.tests.basic"
  compileSdkVersion libs.versions.latestCompileSdk.get().toInteger()
  buildToolsVersion = libs.versions.buildToolsVersion.get()

  defaultConfig {
    versionCode 12
    minSdkVersion 16
    //noinspection ExpiringTargetSdkVersion,ExpiredTargetSdkVersion
    targetSdkVersion 20
    testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    buildConfigField "String", "FOO", "\"bar\""
  }

  buildTypes {
    release {
      minifyEnabled true
      proguardFiles getDefaultProguardFile('proguard-android-optimize.txt')
    }
  }

  splits {
    density {
      enable true
      exclude "ldpi", "tvdpi", "xxxhdpi", "400dpi", "560dpi"
      compatibleScreens 'small', 'normal', 'large', 'xlarge'
    }
  }

  buildFeatures {
    buildConfig true
  }
}

dependencies {
  testImplementation 'junit:junit:4.12'
  androidTestImplementation "com.android.support.test:runner:${libs.versions.testSupportLibVersion.get()}"
  androidTestImplementation "com.android.support.test:rules:${libs.versions.testSupportLibVersion.get()}"
}

// map for the version code
ext.versionCodes = [all:1, mdpi:2, hdpi:3, xhdpi:4, xxhdpi:5]

android.applicationVariants.all { variant ->
  variant.outputs.all { output ->
    println("Customizing " + output)
    def key = output.getFilter(OutputFile.DENSITY) == null ? "all" : output.getFilter(OutputFile.DENSITY)
    def code = project.ext.versionCodes.get(key) * 100 + android.defaultConfig.versionCode
    println "Setting " + output + " version to " + code
    output.setVersionCodeOverride(code)
    output.setVersionNameOverride("version ${code}")
    println("Done with " + output)
  }
}


