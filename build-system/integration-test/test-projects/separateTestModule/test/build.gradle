apply plugin: 'com.android.test'

android {
    namespace 'com.example.android.testing.blueprint.test'
    compileSdkVersion libs.versions.latestCompileSdk.get().toInteger()
    buildToolsVersion = libs.versions.buildToolsVersion.get()

    defaultConfig {
        minSdkVersion libs.versions.supportLibMinSdk.get()
        testApplicationId 'com.example.android.testing.blueprint.test'
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    targetProjectPath ':app'
}

dependencies {
    implementation 'junit:junit:4.12'
    implementation "com.android.support:support-annotations:${libs.versions.supportLibVersion.get()}"
    implementation "androidx.test:runner:1.4.0-alpha06"
    implementation "androidx.test:rules:1.4.0-alpha06"
}

tasks.register('checkDependencies') {
    doLast {
        assert project.connectedCheck instanceof Task
        def deps =  project.connectedCheck.taskDependencies.getDependencies(project.connectedCheck)

        def connectedAndroidTest = deps.find { it.name == "connectedAndroidTest" }
        assert connectedAndroidTest instanceof Task

        deps = connectedAndroidTest.taskDependencies.getDependencies(connectedAndroidTest)
        def actualTestTask = deps.find { it.name == "connectedDebugAndroidTest" }
        // The actual class name has the _Decorated suffix.
        assert actualTestTask.class.name.contains(".DeviceProviderInstrumentTestTask")

        // :test:assembleDebug will fail if the app module is not built, so other tests verify
        // that this ends up compiling the app module.
    }
    // b/224561168
    notCompatibleWithConfigurationCache("doLast block uses project instance")
}
