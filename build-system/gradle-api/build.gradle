apply plugin: 'com.android.tools.java-library'
apply plugin: 'com.android.tools.kotlin'
apply plugin: 'com.android.tools.publish'
apply plugin: 'com.android.tools.metalava'

configurations {
    compileOnlyForJavadoc {
        extendsFrom(configurations.compileOnly)
    }
}

dependencies {
    implementation project(':base:builder-test-api')
    implementation libs.guava
    implementation libs.kotlin_stdlib
    api libs.asm

    compileOnly libs.com.android.tools.annotations
    compileOnly gradleApi()
    compileOnly project(':base:builder-model') // Only present for legacy reasons.

    metalavaTestImplementation libs.com.android.tools.testutils
    metalavaTestImplementation libs.guava
    metalavaTestImplementation libs.junit
    metalavaTestImplementation libs.kotlin_test

    testImplementation libs.junit
    testImplementation libs.kotlin_test
    testImplementation libs.com.android.tools.testutils
    testImplementation gradleApi()
    testImplementation project(':base:builder-model')
    testImplementation libs.com.android.tools.annotations
    testImplementation libs.com.android.tools.common
    testImplementation libs.mockito_core
    testImplementation libs.equalsverifier
}

javadoc {
  classpath += configurations.compileOnlyForJavadoc
}

task javadocZip(type: Zip) {
  dependsOn javadoc
  from javadoc.destinationDir
  archiveBaseName.set('javadoc')
}

group = 'com.android.tools.build'
archivesBaseName = 'gradle-api'
version = rootProject.ext.buildVersion

project.ext.pomName = 'Android Gradle API'
project.ext.pomDesc = 'APIs to customize Android Gradle Builds'

def updateDeprecatedApi = tasks.register('updateDeprecatedApi', JavaExec) {
    classpath(sourceSets['test'].output.classesDirs, sourceSets['test'].runtimeClasspath)
    mainClass = 'com.android.build.api.DeprecatedApiUpdater'
}

def updateApi = tasks.register('updateApi') {
    dependsOn('updateMetalavaApi')
    dependsOn(updateDeprecatedApi)
}
