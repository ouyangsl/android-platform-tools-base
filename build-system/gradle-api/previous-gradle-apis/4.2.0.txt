// Signature format: 4.0
package com.android.build.api.artifact {

  @org.gradle.api.Incubating public abstract class Artifact<T extends org.gradle.api.file.FileSystemLocation> implements java.io.Serializable {
    ctor public Artifact(com.android.build.api.artifact.ArtifactKind<T> kind, com.android.build.api.artifact.Artifact.Category category);
    method public final com.android.build.api.artifact.Artifact.Category getCategory();
    method public String getFileSystemLocationName();
    method public String getFolderName();
    method public final com.android.build.api.artifact.ArtifactKind<T> getKind();
    method public final String name();
    property public final com.android.build.api.artifact.Artifact.Category category;
    property public final com.android.build.api.artifact.ArtifactKind<T> kind;
    field public static final com.android.build.api.artifact.Artifact.Companion Companion;
    field public static final com.android.build.api.artifact.ArtifactKind.DIRECTORY DIRECTORY;
    field public static final com.android.build.api.artifact.ArtifactKind.FILE FILE;
  }

  @org.gradle.api.Incubating public static interface Artifact.Appendable {
  }

  @org.gradle.api.Incubating public enum Artifact.Category {
    method public static com.android.build.api.artifact.Artifact.Category valueOf(String value) throws java.lang.IllegalArgumentException, java.lang.NullPointerException;
    method public static com.android.build.api.artifact.Artifact.Category[] values();
    enum_constant public static final com.android.build.api.artifact.Artifact.Category GENERATED;
    enum_constant public static final com.android.build.api.artifact.Artifact.Category INTERMEDIATES;
    enum_constant public static final com.android.build.api.artifact.Artifact.Category OUTPUTS;
    enum_constant public static final com.android.build.api.artifact.Artifact.Category SOURCES;
  }

  @org.gradle.api.Incubating public static final class Artifact.Companion {
  }

  @org.gradle.api.Incubating public static interface Artifact.ContainsMany {
  }

  @org.gradle.api.Incubating public abstract static class Artifact.MultipleArtifact<FileTypeT extends org.gradle.api.file.FileSystemLocation> extends com.android.build.api.artifact.Artifact<FileTypeT> {
    ctor public Artifact.MultipleArtifact(com.android.build.api.artifact.ArtifactKind<FileTypeT> kind, com.android.build.api.artifact.Artifact.Category category);
  }

  @org.gradle.api.Incubating public static interface Artifact.Replaceable {
  }

  @org.gradle.api.Incubating public abstract static class Artifact.SingleArtifact<FileTypeT extends org.gradle.api.file.FileSystemLocation> extends com.android.build.api.artifact.Artifact<FileTypeT> {
    ctor public Artifact.SingleArtifact(com.android.build.api.artifact.ArtifactKind<FileTypeT> kind, com.android.build.api.artifact.Artifact.Category category);
  }

  @org.gradle.api.Incubating public static interface Artifact.Transformable {
  }

  @org.gradle.api.Incubating public abstract sealed class ArtifactKind<T extends org.gradle.api.file.FileSystemLocation> implements java.io.Serializable {
    method public abstract kotlin.reflect.KClass<T> dataType();
  }

  @org.gradle.api.Incubating public static final class ArtifactKind.DIRECTORY extends com.android.build.api.artifact.ArtifactKind<org.gradle.api.file.Directory> {
    method public kotlin.reflect.KClass<org.gradle.api.file.Directory> dataType();
    field public static final com.android.build.api.artifact.ArtifactKind.DIRECTORY INSTANCE;
  }

  @org.gradle.api.Incubating public static final class ArtifactKind.FILE extends com.android.build.api.artifact.ArtifactKind<org.gradle.api.file.RegularFile> {
    method public kotlin.reflect.KClass<org.gradle.api.file.RegularFile> dataType();
    field public static final com.android.build.api.artifact.ArtifactKind.FILE INSTANCE;
  }

  @org.gradle.api.Incubating public interface ArtifactTransformationRequest<TaskT extends org.gradle.api.Task> {
    method public void submit(TaskT task, kotlin.jvm.functions.Function1<? super com.android.build.api.variant.BuiltArtifact,? extends java.io.File> transformer);
    method public <ParamT extends org.gradle.workers.WorkParameters> java.util.function.Supplier<com.android.build.api.variant.BuiltArtifacts> submit(TaskT task, org.gradle.workers.WorkQueue workQueue, Class<? extends org.gradle.workers.WorkAction<ParamT>> actionType, kotlin.jvm.functions.Function3<? super com.android.build.api.variant.BuiltArtifact,? super org.gradle.api.file.Directory,? super ParamT,? extends java.io.File> parameterConfigurator);
  }

  @org.gradle.api.Incubating public abstract sealed class ArtifactType<T extends org.gradle.api.file.FileSystemLocation> extends com.android.build.api.artifact.Artifact.SingleArtifact<T> {
  }

  @org.gradle.api.Incubating public static final class ArtifactType.AAR extends com.android.build.api.artifact.ArtifactType<org.gradle.api.file.RegularFile> implements com.android.build.api.artifact.Artifact.Transformable {
    field public static final com.android.build.api.artifact.ArtifactType.AAR INSTANCE;
  }

  @org.gradle.api.Incubating public static final class ArtifactType.APK extends com.android.build.api.artifact.ArtifactType<org.gradle.api.file.Directory> implements com.android.build.api.artifact.Artifact.ContainsMany com.android.build.api.artifact.Artifact.Replaceable com.android.build.api.artifact.Artifact.Transformable {
    field public static final com.android.build.api.artifact.ArtifactType.APK INSTANCE;
  }

  @org.gradle.api.Incubating public static final class ArtifactType.BUNDLE extends com.android.build.api.artifact.ArtifactType<org.gradle.api.file.RegularFile> implements com.android.build.api.artifact.Artifact.Transformable {
    field public static final com.android.build.api.artifact.ArtifactType.BUNDLE INSTANCE;
  }

  @org.gradle.api.Incubating public static final class ArtifactType.MERGED_MANIFEST extends com.android.build.api.artifact.ArtifactType<org.gradle.api.file.RegularFile> implements com.android.build.api.artifact.Artifact.Replaceable com.android.build.api.artifact.Artifact.Transformable {
    field public static final com.android.build.api.artifact.ArtifactType.MERGED_MANIFEST INSTANCE;
  }

  @org.gradle.api.Incubating public static final class ArtifactType.OBFUSCATION_MAPPING_FILE extends com.android.build.api.artifact.ArtifactType<org.gradle.api.file.RegularFile> {
    field public static final com.android.build.api.artifact.ArtifactType.OBFUSCATION_MAPPING_FILE INSTANCE;
  }

  @org.gradle.api.Incubating public static final class ArtifactType.PUBLIC_ANDROID_RESOURCES_LIST extends com.android.build.api.artifact.ArtifactType<org.gradle.api.file.RegularFile> {
    field public static final com.android.build.api.artifact.ArtifactType.PUBLIC_ANDROID_RESOURCES_LIST INSTANCE;
  }

  @org.gradle.api.Incubating public interface Artifacts {
    method public <FileTypeT extends org.gradle.api.file.FileSystemLocation> org.gradle.api.provider.Provider<FileTypeT> get(com.android.build.api.artifact.ArtifactType<FileTypeT> type);
    method public <FileTypeT extends org.gradle.api.file.FileSystemLocation> org.gradle.api.provider.Provider<java.util.List<FileTypeT>> getAll(com.android.build.api.artifact.MultipleArtifactType<FileTypeT> type);
    method public com.android.build.api.variant.BuiltArtifactsLoader getBuiltArtifactsLoader();
    method public <TaskT extends org.gradle.api.Task> com.android.build.api.artifact.TaskBasedOperation<TaskT> use(org.gradle.api.tasks.TaskProvider<TaskT> taskProvider);
  }

  @org.gradle.api.Incubating public interface CombiningOperationRequest<FileTypeT extends org.gradle.api.file.FileSystemLocation> {
    method public <ArtifactTypeT extends com.android.build.api.artifact.Artifact.MultipleArtifact<FileTypeT> & com.android.build.api.artifact.Artifact.Transformable> void toTransform(ArtifactTypeT type);
  }

  public enum FileNames {
    method public final String getFileName();
    method public static com.android.build.api.artifact.FileNames valueOf(String value) throws java.lang.IllegalArgumentException, java.lang.NullPointerException;
    method public static com.android.build.api.artifact.FileNames[] values();
    property public final String fileName;
    enum_constant public static final com.android.build.api.artifact.FileNames ANDROID_MANIFEST_XML;
    enum_constant public static final com.android.build.api.artifact.FileNames OBFUSCATION_MAPPING_FILE;
  }

  @org.gradle.api.Incubating public interface InAndOutDirectoryOperationRequest<TaskT extends org.gradle.api.Task> {
    method public <ArtifactTypeT extends com.android.build.api.artifact.Artifact.SingleArtifact<org.gradle.api.file.Directory> & com.android.build.api.artifact.Artifact.Transformable> void toTransform(ArtifactTypeT type);
    method public <ArtifactTypeT extends com.android.build.api.artifact.Artifact.SingleArtifact<org.gradle.api.file.Directory> & com.android.build.api.artifact.Artifact.ContainsMany> com.android.build.api.artifact.ArtifactTransformationRequest<TaskT> toTransformMany(ArtifactTypeT type);
  }

  @org.gradle.api.Incubating public interface InAndOutFileOperationRequest {
    method public <ArtifactTypeT extends com.android.build.api.artifact.Artifact.SingleArtifact<org.gradle.api.file.RegularFile> & com.android.build.api.artifact.Artifact.Transformable> void toTransform(ArtifactTypeT type);
  }

  @org.gradle.api.Incubating public abstract sealed class MultipleArtifactType<FileTypeT extends org.gradle.api.file.FileSystemLocation> extends com.android.build.api.artifact.Artifact.MultipleArtifact<FileTypeT> {
  }

  @org.gradle.api.Incubating public interface OutOperationRequest<FileTypeT extends org.gradle.api.file.FileSystemLocation> {
    method public <ArtifactTypeT extends com.android.build.api.artifact.Artifact.MultipleArtifact<FileTypeT> & com.android.build.api.artifact.Artifact.Appendable> void toAppendTo(ArtifactTypeT type);
    method public <ArtifactTypeT extends com.android.build.api.artifact.Artifact.SingleArtifact<FileTypeT> & com.android.build.api.artifact.Artifact.Replaceable> void toCreate(ArtifactTypeT type);
  }

  @org.gradle.api.Incubating public interface TaskBasedOperation<TaskT extends org.gradle.api.Task> {
    method public <FileTypeT extends org.gradle.api.file.FileSystemLocation> com.android.build.api.artifact.OutOperationRequest<FileTypeT> wiredWith(kotlin.jvm.functions.Function1<? super TaskT,? extends org.gradle.api.file.FileSystemLocationProperty<FileTypeT>> taskOutput);
    method public <FileTypeT extends org.gradle.api.file.FileSystemLocation> com.android.build.api.artifact.CombiningOperationRequest<FileTypeT> wiredWith(kotlin.jvm.functions.Function1<? super TaskT,? extends org.gradle.api.provider.ListProperty<FileTypeT>> taskInput, kotlin.jvm.functions.Function1<? super TaskT,? extends org.gradle.api.file.FileSystemLocationProperty<FileTypeT>> taskOutput);
    method public com.android.build.api.artifact.InAndOutDirectoryOperationRequest<TaskT> wiredWithDirectories(kotlin.jvm.functions.Function1<? super TaskT,? extends org.gradle.api.file.DirectoryProperty> taskInput, kotlin.jvm.functions.Function1<? super TaskT,? extends org.gradle.api.file.DirectoryProperty> taskOutput);
    method public com.android.build.api.artifact.InAndOutFileOperationRequest wiredWithFiles(kotlin.jvm.functions.Function1<? super TaskT,? extends org.gradle.api.file.RegularFileProperty> taskInput, kotlin.jvm.functions.Function1<? super TaskT,? extends org.gradle.api.file.RegularFileProperty> taskOutput);
  }

}

package com.android.build.api.attributes {

  public interface BuildTypeAttr extends org.gradle.api.Named {
    field public static final org.gradle.api.attributes.Attribute<com.android.build.api.attributes.BuildTypeAttr> ATTRIBUTE;
    field public static final com.android.build.api.attributes.BuildTypeAttr.Companion Companion;
  }

  public static final class BuildTypeAttr.Companion {
  }

  public interface ProductFlavorAttr extends org.gradle.api.Named {
  }

  public interface VariantAttr extends org.gradle.api.Named {
    field public static final org.gradle.api.attributes.Attribute<com.android.build.api.attributes.VariantAttr> ATTRIBUTE;
    field public static final com.android.build.api.attributes.VariantAttr.Companion Companion;
  }

  public static final class VariantAttr.Companion {
  }

}

package com.android.build.api.component {

  @org.gradle.api.Incubating public interface ActionableComponentObject {
  }

  @org.gradle.api.Incubating public interface AndroidTest extends com.android.build.api.component.TestComponent {
    method public void aaptOptions(kotlin.jvm.functions.Function1<? super com.android.build.api.variant.AaptOptions,kotlin.Unit> action);
    method public void addResValue(String name, String type, String value, String? comment);
    method public void addResValue(String name, String type, org.gradle.api.provider.Provider<java.lang.String> value, String? comment);
    method public com.android.build.api.variant.AaptOptions getAaptOptions();
    method public org.gradle.api.provider.Property<java.lang.String> getApplicationId();
    method public org.gradle.api.provider.MapProperty<java.lang.String,? extends com.android.build.api.variant.BuildConfigField<? extends java.io.Serializable>> getBuildConfigFields();
    method public org.gradle.api.provider.Property<java.lang.Boolean> getFunctionalTest();
    method public org.gradle.api.provider.Property<java.lang.Boolean> getHandleProfiling();
    method public org.gradle.api.provider.Property<java.lang.String> getInstrumentationRunner();
    method public org.gradle.api.provider.MapProperty<java.lang.String,java.lang.String> getManifestPlaceholders();
    method public org.gradle.api.provider.Provider<java.lang.String> getPackageName();
    method public com.android.build.api.variant.ApkPackagingOptions getPackagingOptions();
    method public com.android.build.api.variant.SigningConfig getSigningConfig();
    method public org.gradle.api.provider.Property<java.lang.String> getTestLabel();
    method public void packagingOptions(kotlin.jvm.functions.Function1<? super com.android.build.api.variant.ApkPackagingOptions,kotlin.Unit> action);
    method public void signingConfig(kotlin.jvm.functions.Function1<? super com.android.build.api.variant.SigningConfig,kotlin.Unit> action);
    property public abstract com.android.build.api.variant.AaptOptions aaptOptions;
    property public abstract org.gradle.api.provider.Property<java.lang.String> applicationId;
    property public abstract org.gradle.api.provider.MapProperty<java.lang.String,? extends com.android.build.api.variant.BuildConfigField<? extends java.io.Serializable>> buildConfigFields;
    property public abstract org.gradle.api.provider.Property<java.lang.Boolean> functionalTest;
    property public abstract org.gradle.api.provider.Property<java.lang.Boolean> handleProfiling;
    property public abstract org.gradle.api.provider.Property<java.lang.String> instrumentationRunner;
    property public abstract org.gradle.api.provider.MapProperty<java.lang.String,java.lang.String> manifestPlaceholders;
    property public abstract org.gradle.api.provider.Provider<java.lang.String> packageName;
    property public abstract com.android.build.api.variant.ApkPackagingOptions packagingOptions;
    property public abstract com.android.build.api.variant.SigningConfig signingConfig;
    property public abstract org.gradle.api.provider.Property<java.lang.String> testLabel;
  }

  @org.gradle.api.Incubating public interface AndroidTestBuilder extends com.android.build.api.component.TestComponentBuilder {
  }

  @org.gradle.api.Incubating public interface Component extends com.android.build.api.component.ComponentIdentity com.android.build.api.component.ActionableComponentObject {
    method public com.android.build.api.artifact.Artifacts getArtifacts();
    method public void setAsmFramesComputationMode(com.android.build.api.instrumentation.FramesComputationMode mode);
    method public <ParamT extends com.android.build.api.instrumentation.InstrumentationParameters> void transformClassesWith(Class<? extends com.android.build.api.instrumentation.AsmClassVisitorFactory<ParamT>> classVisitorFactoryImplClass, com.android.build.api.instrumentation.InstrumentationScope scope, kotlin.jvm.functions.Function1<? super ParamT,kotlin.Unit> instrumentationParamsConfig);
    property public abstract com.android.build.api.artifact.Artifacts artifacts;
  }

  @org.gradle.api.Incubating public interface ComponentBuilder extends com.android.build.api.component.ComponentIdentity com.android.build.api.component.ActionableComponentObject {
    method @Deprecated public boolean getEnable();
    method public boolean getEnabled();
    method @Deprecated public void setEnable(boolean);
    method public void setEnabled(boolean);
    property @Deprecated public abstract boolean enable;
    property public abstract boolean enabled;
  }

  @org.gradle.api.Incubating public interface ComponentIdentity extends org.gradle.api.Named {
    method public String? getBuildType();
    method public String getFlavorName();
    method public java.util.List<kotlin.Pair<java.lang.String,java.lang.String>> getProductFlavors();
    property public abstract String? buildType;
    property public abstract String flavorName;
    property public abstract java.util.List<kotlin.Pair<java.lang.String,java.lang.String>> productFlavors;
  }

  @org.gradle.api.Incubating public interface TestComponent extends com.android.build.api.component.Component {
    method public com.android.build.api.variant.Variant getTestedVariant();
    property public abstract com.android.build.api.variant.Variant testedVariant;
  }

  @org.gradle.api.Incubating public interface TestComponentBuilder extends com.android.build.api.component.ComponentBuilder {
  }

  @org.gradle.api.Incubating public interface UnitTest extends com.android.build.api.component.TestComponent {
  }

  @org.gradle.api.Incubating public interface UnitTestBuilder extends com.android.build.api.component.TestComponentBuilder {
  }

}

package com.android.build.api.dsl {

  @org.gradle.api.Incubating public interface AaptOptions {
    method public void additionalParameters(String params);
    method public void additionalParameters(java.lang.String... params);
    method public java.util.List<java.lang.String> getAdditionalParameters();
    method public boolean getFailOnMissingConfigEntry();
    method public String? getIgnoreAssetsPattern();
    method public boolean getNamespaced();
    method public java.util.Collection<java.lang.String> getNoCompress();
    method public void noCompress(String noCompress);
    method public void noCompress(java.lang.String... noCompress);
    method public void setFailOnMissingConfigEntry(boolean);
    method public void setIgnoreAssetsPattern(String?);
    method public void setNamespaced(boolean);
    property public abstract java.util.List<java.lang.String> additionalParameters;
    property public abstract boolean failOnMissingConfigEntry;
    property public abstract String? ignoreAssetsPattern;
    property public abstract boolean namespaced;
    property public abstract java.util.Collection<java.lang.String> noCompress;
  }

  @org.gradle.api.Incubating public interface AarMetadata {
    method public Integer? getMinCompileSdk();
    method public void setMinCompileSdk(Integer?);
    property public abstract Integer? minCompileSdk;
  }

  @org.gradle.api.Incubating public interface AbiSplit extends com.android.build.api.dsl.SplitOptions {
    method public boolean isUniversalApk();
    method public void setUniversalApk(boolean);
    property public abstract boolean isUniversalApk;
  }

  @org.gradle.api.Incubating public interface AdbOptions {
    method public java.util.Collection<java.lang.String>? getInstallOptions();
    method public int getTimeOutInMs();
    method public void installOptions(String option);
    method public void installOptions(java.lang.String... options);
    method public void setInstallOptions(java.util.Collection<java.lang.String>?);
    method public void setTimeOutInMs(int);
    property public abstract java.util.Collection<java.lang.String>? installOptions;
    property public abstract int timeOutInMs;
  }

  @org.gradle.api.Incubating public interface AndroidSourceDirectorySet extends org.gradle.api.Named org.gradle.api.tasks.util.PatternFilterable {
    method public Object setSrcDirs(Iterable<?> srcDirs);
    method public Object srcDir(Object srcDir);
    method public Object srcDirs(java.lang.Object... srcDirs);
  }

  @org.gradle.api.Incubating public interface AndroidSourceFile extends org.gradle.api.Named {
    method public Object srcFile(Object srcPath);
  }

  @org.gradle.api.Incubating public interface AndroidSourceSet extends org.gradle.api.Named {
    method public void aidl(kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.AndroidSourceDirectorySet,kotlin.Unit> action);
    method public void assets(kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.AndroidSourceDirectorySet,kotlin.Unit> action);
    method public com.android.build.api.dsl.AndroidSourceDirectorySet getAidl();
    method public String getAnnotationProcessorConfigurationName();
    method public String getApiConfigurationName();
    method public com.android.build.api.dsl.AndroidSourceDirectorySet getAssets();
    method public String getCompileOnlyConfigurationName();
    method public String getImplementationConfigurationName();
    method public com.android.build.api.dsl.AndroidSourceDirectorySet getJava();
    method public com.android.build.api.dsl.AndroidSourceDirectorySet getJni();
    method public com.android.build.api.dsl.AndroidSourceDirectorySet getJniLibs();
    method public com.android.build.api.dsl.AndroidSourceFile getManifest();
    method public com.android.build.api.dsl.AndroidSourceDirectorySet getMlModels();
    method public com.android.build.api.dsl.AndroidSourceDirectorySet getRenderscript();
    method public com.android.build.api.dsl.AndroidSourceDirectorySet getRes();
    method public com.android.build.api.dsl.AndroidSourceDirectorySet getResources();
    method public String getRuntimeOnlyConfigurationName();
    method public com.android.build.api.dsl.AndroidSourceDirectorySet getShaders();
    method public String getWearAppConfigurationName();
    method public void java(kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.AndroidSourceDirectorySet,kotlin.Unit> action);
    method public void jni(kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.AndroidSourceDirectorySet,kotlin.Unit> action);
    method public void jniLibs(kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.AndroidSourceDirectorySet,kotlin.Unit> action);
    method public void manifest(kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.AndroidSourceFile,kotlin.Unit> action);
    method public void mlModels(kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.AndroidSourceDirectorySet,kotlin.Unit> action);
    method public void renderscript(kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.AndroidSourceDirectorySet,kotlin.Unit> action);
    method public void res(kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.AndroidSourceDirectorySet,kotlin.Unit> action);
    method public void resources(kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.AndroidSourceDirectorySet,kotlin.Unit> action);
    method public Object setRoot(String path);
    method public void shaders(kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.AndroidSourceDirectorySet,kotlin.Unit> action);
    property public abstract com.android.build.api.dsl.AndroidSourceDirectorySet aidl;
    property public abstract String annotationProcessorConfigurationName;
    property public abstract String apiConfigurationName;
    property public abstract com.android.build.api.dsl.AndroidSourceDirectorySet assets;
    property public abstract String compileOnlyConfigurationName;
    property public abstract String implementationConfigurationName;
    property public abstract com.android.build.api.dsl.AndroidSourceDirectorySet java;
    property public abstract com.android.build.api.dsl.AndroidSourceDirectorySet jni;
    property public abstract com.android.build.api.dsl.AndroidSourceDirectorySet jniLibs;
    property public abstract com.android.build.api.dsl.AndroidSourceFile manifest;
    property public abstract com.android.build.api.dsl.AndroidSourceDirectorySet mlModels;
    property public abstract com.android.build.api.dsl.AndroidSourceDirectorySet renderscript;
    property public abstract com.android.build.api.dsl.AndroidSourceDirectorySet res;
    property public abstract com.android.build.api.dsl.AndroidSourceDirectorySet resources;
    property public abstract String runtimeOnlyConfigurationName;
    property public abstract com.android.build.api.dsl.AndroidSourceDirectorySet shaders;
    property public abstract String wearAppConfigurationName;
  }

  @org.gradle.api.Incubating public interface AnnotationProcessorOptions {
    method public void argument(String key, String value);
    method public void arguments(java.util.Map<java.lang.String,java.lang.String> arguments);
    method public void className(String className);
    method public void classNames(java.lang.String... classNames);
    method public void compilerArgumentProvider(org.gradle.process.CommandLineArgumentProvider compilerArgumentProvider);
    method public void compilerArgumentProviders(org.gradle.process.CommandLineArgumentProvider... compilerArgumentProviders);
    method public java.util.Map<java.lang.String,java.lang.String> getArguments();
    method public java.util.List<java.lang.String> getClassNames();
    method public java.util.List<org.gradle.process.CommandLineArgumentProvider> getCompilerArgumentProviders();
    property public abstract java.util.Map<java.lang.String,java.lang.String> arguments;
    property public abstract java.util.List<java.lang.String> classNames;
    property public abstract java.util.List<org.gradle.process.CommandLineArgumentProvider> compilerArgumentProviders;
  }

  @org.gradle.api.Incubating public interface ApkExtension {
  }

  @org.gradle.api.Incubating public interface ApplicationBaseFlavor<SigningConfigT extends com.android.build.api.dsl.SigningConfig> extends com.android.build.api.dsl.BaseFlavor com.android.build.api.dsl.ApplicationVariantDimension<SigningConfigT> {
    method public String? getApplicationId();
    method public Integer? getMaxSdk();
    method public Integer? getTargetSdk();
    method public String? getTargetSdkPreview();
    method public Integer? getVersionCode();
    method public String? getVersionName();
    method public void setApplicationId(String?);
    method public void setMaxSdk(Integer?);
    method public void setTargetSdk(Integer?);
    method public void setTargetSdkPreview(String?);
    method public void setVersionCode(Integer?);
    method public void setVersionName(String?);
    property public abstract String? applicationId;
    property public abstract Integer? maxSdk;
    property public abstract Integer? targetSdk;
    property public abstract String? targetSdkPreview;
    property public abstract Integer? versionCode;
    property public abstract String? versionName;
  }

  @org.gradle.api.Incubating public interface ApplicationBuildFeatures extends com.android.build.api.dsl.BuildFeatures {
    method public Boolean? getDataBinding();
    method public Boolean? getMlModelBinding();
    method public void setDataBinding(Boolean?);
    method public void setMlModelBinding(Boolean?);
    property public abstract Boolean? dataBinding;
    property public abstract Boolean? mlModelBinding;
  }

  @org.gradle.api.Incubating public interface ApplicationBuildType<SigningConfigT extends com.android.build.api.dsl.SigningConfig> extends com.android.build.api.dsl.BuildType com.android.build.api.dsl.ApplicationVariantDimension<SigningConfigT> {
    method public Boolean? isCrunchPngs();
    method public boolean isDebuggable();
    method public boolean isDefault();
    method public boolean isEmbedMicroApp();
    method public void setCrunchPngs(Boolean?);
    method public void setDebuggable(boolean);
    method public void setDefault(boolean);
    method public void setEmbedMicroApp(boolean);
    property public abstract Boolean? isCrunchPngs;
    property public abstract boolean isDebuggable;
    property public abstract boolean isDefault;
    property public abstract boolean isEmbedMicroApp;
  }

  @org.gradle.api.Incubating public interface ApplicationDefaultConfig<SigningConfigT extends com.android.build.api.dsl.SigningConfig> extends com.android.build.api.dsl.ApplicationBaseFlavor<SigningConfigT> com.android.build.api.dsl.DefaultConfig {
  }

  @org.gradle.api.Incubating public interface ApplicationExtension<AndroidSourceSetT extends com.android.build.api.dsl.AndroidSourceSet, BuildTypeT extends com.android.build.api.dsl.ApplicationBuildType<SigningConfigT>, DefaultConfigT extends com.android.build.api.dsl.ApplicationDefaultConfig<SigningConfigT>, ProductFlavorT extends com.android.build.api.dsl.ApplicationProductFlavor<SigningConfigT>, SigningConfigT extends com.android.build.api.dsl.SigningConfig> extends com.android.build.api.dsl.CommonExtension<AndroidSourceSetT,com.android.build.api.dsl.ApplicationBuildFeatures,BuildTypeT,DefaultConfigT,ProductFlavorT,SigningConfigT,com.android.build.api.variant.ApplicationVariantBuilder,com.android.build.api.variant.ApplicationVariant> com.android.build.api.dsl.ApkExtension com.android.build.api.dsl.TestedExtension {
    method public void bundle(kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.Bundle,kotlin.Unit> action);
    method public void dependenciesInfo(kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.DependenciesInfo,kotlin.Unit> action);
    method public java.util.Set<java.lang.String> getAssetPacks();
    method public com.android.build.api.dsl.Bundle getBundle();
    method public com.android.build.api.dsl.DependenciesInfo getDependenciesInfo();
    method public java.util.Set<java.lang.String> getDynamicFeatures();
    property public abstract java.util.Set<java.lang.String> assetPacks;
    property public abstract com.android.build.api.dsl.Bundle bundle;
    property public abstract com.android.build.api.dsl.DependenciesInfo dependenciesInfo;
    property public abstract java.util.Set<java.lang.String> dynamicFeatures;
  }

  @org.gradle.api.Incubating public interface ApplicationProductFlavor<SigningConfigT extends com.android.build.api.dsl.SigningConfig> extends com.android.build.api.dsl.ApplicationBaseFlavor<SigningConfigT> com.android.build.api.dsl.ProductFlavor {
    method public boolean isDefault();
    method public void setDefault(boolean);
    property public abstract boolean isDefault;
  }

  @org.gradle.api.Incubating public interface ApplicationVariantDimension<SigningConfigT extends com.android.build.api.dsl.SigningConfig> extends com.android.build.api.dsl.VariantDimension {
    method public String? getApplicationIdSuffix();
    method public Boolean? getMultiDexEnabled();
    method public SigningConfigT? getSigningConfig();
    method public String? getVersionNameSuffix();
    method public void setApplicationIdSuffix(String?);
    method public void setMultiDexEnabled(Boolean?);
    method public void setSigningConfig(SigningConfigT?);
    method public void setVersionNameSuffix(String?);
    property public abstract String? applicationIdSuffix;
    property public abstract Boolean? multiDexEnabled;
    property public abstract SigningConfigT? signingConfig;
    property public abstract String? versionNameSuffix;
  }

  @org.gradle.api.Incubating public interface AssetPackExtension {
    method public void dynamicDelivery(kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.DynamicDelivery,kotlin.Unit> action);
    method public com.android.build.api.dsl.DynamicDelivery getDynamicDelivery();
    method public org.gradle.api.provider.Property<java.lang.String> getPackName();
    property public abstract com.android.build.api.dsl.DynamicDelivery dynamicDelivery;
    property public abstract org.gradle.api.provider.Property<java.lang.String> packName;
  }

  @org.gradle.api.Incubating public interface BaseFlavor extends com.android.build.api.dsl.VariantDimension {
    method public Integer? getMinSdk();
    method public String? getMinSdkPreview();
    method public String getName();
    method public Boolean? getRenderscriptNdkModeEnabled();
    method public Boolean? getRenderscriptSupportModeBlasEnabled();
    method public Boolean? getRenderscriptSupportModeEnabled();
    method public Integer? getRenderscriptTargetApi();
    method public java.util.Set<java.lang.String> getResourceConfigurations();
    method public String? getTestApplicationId();
    method public Boolean? getTestFunctionalTest();
    method public Boolean? getTestHandleProfiling();
    method public String? getTestInstrumentationRunner();
    method public java.util.Map<java.lang.String,java.lang.String> getTestInstrumentationRunnerArguments();
    method public com.android.build.api.dsl.VectorDrawables getVectorDrawables();
    method public Boolean? getWearAppUnbundled();
    method public void setMinSdk(Integer?);
    method public void setMinSdkPreview(String?);
    method public void setRenderscriptNdkModeEnabled(Boolean?);
    method public void setRenderscriptSupportModeBlasEnabled(Boolean?);
    method public void setRenderscriptSupportModeEnabled(Boolean?);
    method public void setRenderscriptTargetApi(Integer?);
    method public void setTestApplicationId(String?);
    method public void setTestFunctionalTest(Boolean?);
    method public void setTestHandleProfiling(Boolean?);
    method public void setTestInstrumentationRunner(String?);
    method public void setWearAppUnbundled(Boolean?);
    method public void vectorDrawables(kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.VectorDrawables,kotlin.Unit> action);
    property public abstract Integer? minSdk;
    property public abstract String? minSdkPreview;
    property public abstract Boolean? renderscriptNdkModeEnabled;
    property public abstract Boolean? renderscriptSupportModeBlasEnabled;
    property public abstract Boolean? renderscriptSupportModeEnabled;
    property public abstract Integer? renderscriptTargetApi;
    property public abstract java.util.Set<java.lang.String> resourceConfigurations;
    property public abstract String? testApplicationId;
    property public abstract Boolean? testFunctionalTest;
    property public abstract Boolean? testHandleProfiling;
    property public abstract String? testInstrumentationRunner;
    property public abstract java.util.Map<java.lang.String,java.lang.String> testInstrumentationRunnerArguments;
    property public abstract com.android.build.api.dsl.VectorDrawables vectorDrawables;
    property public abstract Boolean? wearAppUnbundled;
  }

  @org.gradle.api.Incubating public interface BuildFeatures extends org.gradle.api.plugins.ExtensionAware {
    method public Boolean? getAidl();
    method public Boolean? getBuildConfig();
    method public Boolean? getCompose();
    method public Boolean? getPrefab();
    method public Boolean? getRenderScript();
    method public Boolean? getResValues();
    method public Boolean? getShaders();
    method public Boolean? getViewBinding();
    method public void setAidl(Boolean?);
    method public void setBuildConfig(Boolean?);
    method public void setCompose(Boolean?);
    method public void setPrefab(Boolean?);
    method public void setRenderScript(Boolean?);
    method public void setResValues(Boolean?);
    method public void setShaders(Boolean?);
    method public void setViewBinding(Boolean?);
    property public abstract Boolean? aidl;
    property public abstract Boolean? buildConfig;
    property public abstract Boolean? compose;
    property public abstract Boolean? prefab;
    property public abstract Boolean? renderScript;
    property public abstract Boolean? resValues;
    property public abstract Boolean? shaders;
    property public abstract Boolean? viewBinding;
  }

  @org.gradle.api.Incubating public interface BuildType extends org.gradle.api.Named org.gradle.api.plugins.ExtensionAware com.android.build.api.dsl.VariantDimension {
    method public java.util.List<java.lang.String> getMatchingFallbacks();
    method public int getRenderscriptOptimLevel();
    method public boolean isJniDebuggable();
    method public boolean isMinifyEnabled();
    method public boolean isPseudoLocalesEnabled();
    method public boolean isRenderscriptDebuggable();
    method public boolean isTestCoverageEnabled();
    method public void setJniDebuggable(boolean);
    method public void setMinifyEnabled(boolean);
    method public void setPseudoLocalesEnabled(boolean);
    method public void setRenderscriptDebuggable(boolean);
    method public void setRenderscriptOptimLevel(int);
    method public void setTestCoverageEnabled(boolean);
    property public abstract boolean isJniDebuggable;
    property public abstract boolean isMinifyEnabled;
    property public abstract boolean isPseudoLocalesEnabled;
    property public abstract boolean isRenderscriptDebuggable;
    property public abstract boolean isTestCoverageEnabled;
    property public abstract java.util.List<java.lang.String> matchingFallbacks;
    property public abstract int renderscriptOptimLevel;
  }

  @org.gradle.api.Incubating public interface Bundle {
    method public void abi(kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.BundleAbi,kotlin.Unit> action);
    method public void density(kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.BundleDensity,kotlin.Unit> action);
    method public void deviceTier(kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.BundleDeviceTier,kotlin.Unit> action);
    method public com.android.build.api.dsl.BundleAbi getAbi();
    method public com.android.build.api.dsl.BundleDensity getDensity();
    method public com.android.build.api.dsl.BundleDeviceTier getDeviceTier();
    method public com.android.build.api.dsl.BundleLanguage getLanguage();
    method public com.android.build.api.dsl.BundleTexture getTexture();
    method public void language(kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.BundleLanguage,kotlin.Unit> action);
    method public void texture(kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.BundleTexture,kotlin.Unit> action);
    property public abstract com.android.build.api.dsl.BundleAbi abi;
    property public abstract com.android.build.api.dsl.BundleDensity density;
    property public abstract com.android.build.api.dsl.BundleDeviceTier deviceTier;
    property public abstract com.android.build.api.dsl.BundleLanguage language;
    property public abstract com.android.build.api.dsl.BundleTexture texture;
  }

  @org.gradle.api.Incubating public interface BundleAbi {
    method public Boolean? getEnableSplit();
    method public void setEnableSplit(Boolean?);
    property public abstract Boolean? enableSplit;
  }

  @org.gradle.api.Incubating public interface BundleDensity {
    method public Boolean? getEnableSplit();
    method public void setEnableSplit(Boolean?);
    property public abstract Boolean? enableSplit;
  }

  @org.gradle.api.Incubating public interface BundleDeviceTier {
    method public String? getDefaultTier();
    method public Boolean? getEnableSplit();
    method public void setDefaultTier(String?);
    method public void setEnableSplit(Boolean?);
    property public abstract String? defaultTier;
    property public abstract Boolean? enableSplit;
  }

  @org.gradle.api.Incubating public interface BundleLanguage {
    method public Boolean? getEnableSplit();
    method public void setEnableSplit(Boolean?);
    property public abstract Boolean? enableSplit;
  }

  @org.gradle.api.Incubating public interface BundleTexture {
    method public String? getDefaultFormat();
    method public Boolean? getEnableSplit();
    method public void setDefaultFormat(String?);
    method public void setEnableSplit(Boolean?);
    property public abstract String? defaultFormat;
    property public abstract Boolean? enableSplit;
  }

  @org.gradle.api.Incubating public interface Cmake {
    method public void buildStagingDirectory(Object? buildStagingDirectory);
    method public java.io.File? getBuildStagingDirectory();
    method public java.io.File? getPath();
    method public String? getVersion();
    method public void path(Object? path);
    method public void setBuildStagingDirectory(java.io.File?);
    method public void setPath(java.io.File?);
    method public void setVersion(String?);
    property public abstract java.io.File? buildStagingDirectory;
    property public abstract java.io.File? path;
    property public abstract String? version;
  }

  @org.gradle.api.Incubating public interface CommonExtension<AndroidSourceSetT extends com.android.build.api.dsl.AndroidSourceSet, BuildFeaturesT extends com.android.build.api.dsl.BuildFeatures, BuildTypeT extends com.android.build.api.dsl.BuildType, DefaultConfigT extends com.android.build.api.dsl.DefaultConfig, ProductFlavorT extends com.android.build.api.dsl.ProductFlavor, SigningConfigT extends com.android.build.api.dsl.SigningConfig, VariantBuilderT extends com.android.build.api.variant.VariantBuilder, VariantT extends com.android.build.api.variant.Variant> {
    method public void aaptOptions(kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.AaptOptions,kotlin.Unit> action);
    method public void adbOptions(kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.AdbOptions,kotlin.Unit> action);
    method public void buildFeatures(kotlin.jvm.functions.Function1<? super BuildFeaturesT,kotlin.Unit> action);
    method public void buildTypes(org.gradle.api.Action<? super org.gradle.api.NamedDomainObjectContainer<BuildTypeT>> action);
    method public void compileOptions(kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.CompileOptions,kotlin.Unit> action);
    method public void compileSdkAddon(String vendor, String name, int version);
    method public void composeOptions(kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.ComposeOptions,kotlin.Unit> action);
    method public void dataBinding(kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.DataBinding,kotlin.Unit> action);
    method public void defaultConfig(org.gradle.api.Action<DefaultConfigT> action);
    method public void externalNativeBuild(kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.ExternalNativeBuild,kotlin.Unit> action);
    method public com.android.build.api.dsl.AaptOptions getAaptOptions();
    method public com.android.build.api.dsl.AdbOptions getAdbOptions();
    method public BuildFeaturesT getBuildFeatures();
    method public String getBuildToolsVersion();
    method public org.gradle.api.NamedDomainObjectContainer<BuildTypeT> getBuildTypes();
    method public com.android.build.api.dsl.CompileOptions getCompileOptions();
    method public Integer? getCompileSdk();
    method public String? getCompileSdkPreview();
    method public com.android.build.api.dsl.ComposeOptions getComposeOptions();
    method public com.android.build.api.dsl.DataBinding getDataBinding();
    method public DefaultConfigT getDefaultConfig();
    method public com.android.build.api.dsl.ExternalNativeBuild getExternalNativeBuild();
    method public java.util.List<java.lang.String> getFlavorDimensions();
    method public com.android.build.api.dsl.JacocoOptions getJacoco();
    method public com.android.build.api.dsl.LintOptions getLintOptions();
    method public String? getNamespace();
    method public String? getNdkPath();
    method public String? getNdkVersion();
    method public com.android.build.api.dsl.PackagingOptions getPackagingOptions();
    method public org.gradle.api.NamedDomainObjectContainer<ProductFlavorT> getProductFlavors();
    method public String? getResourcePrefix();
    method @Deprecated public com.android.build.api.dsl.SdkComponents getSdkComponents();
    method public org.gradle.api.NamedDomainObjectContainer<SigningConfigT> getSigningConfigs();
    method public org.gradle.api.NamedDomainObjectContainer<AndroidSourceSetT> getSourceSets();
    method public com.android.build.api.dsl.Splits getSplits();
    method public com.android.build.api.dsl.TestOptions getTestOptions();
    method public void jacoco(kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.JacocoOptions,kotlin.Unit> action);
    method public void lintOptions(kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.LintOptions,kotlin.Unit> action);
    method public void packagingOptions(kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.PackagingOptions,kotlin.Unit> action);
    method public void productFlavors(org.gradle.api.Action<org.gradle.api.NamedDomainObjectContainer<ProductFlavorT>> action);
    method public void setBuildToolsVersion(String);
    method public void setCompileSdk(Integer?);
    method public void setCompileSdkPreview(String?);
    method public void setNamespace(String?);
    method public void setNdkPath(String?);
    method public void setNdkVersion(String?);
    method public void setResourcePrefix(String?);
    method public void signingConfigs(org.gradle.api.Action<org.gradle.api.NamedDomainObjectContainer<SigningConfigT>> action);
    method public void sourceSets(kotlin.jvm.functions.Function1<? super org.gradle.api.NamedDomainObjectContainer<AndroidSourceSetT>,kotlin.Unit> action);
    method public void splits(kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.Splits,kotlin.Unit> action);
    method public void testOptions(kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.TestOptions,kotlin.Unit> action);
    method public void useLibrary(String name);
    method public void useLibrary(String name, boolean required);
    property public abstract com.android.build.api.dsl.AaptOptions aaptOptions;
    property public abstract com.android.build.api.dsl.AdbOptions adbOptions;
    property public abstract BuildFeaturesT buildFeatures;
    property public abstract String buildToolsVersion;
    property public abstract org.gradle.api.NamedDomainObjectContainer<BuildTypeT> buildTypes;
    property public abstract com.android.build.api.dsl.CompileOptions compileOptions;
    property public abstract Integer? compileSdk;
    property public abstract String? compileSdkPreview;
    property public abstract com.android.build.api.dsl.ComposeOptions composeOptions;
    property public abstract com.android.build.api.dsl.DataBinding dataBinding;
    property public abstract DefaultConfigT defaultConfig;
    property public abstract com.android.build.api.dsl.ExternalNativeBuild externalNativeBuild;
    property public abstract java.util.List<java.lang.String> flavorDimensions;
    property public abstract com.android.build.api.dsl.JacocoOptions jacoco;
    property public abstract com.android.build.api.dsl.LintOptions lintOptions;
    property public abstract String? namespace;
    property public abstract String? ndkPath;
    property public abstract String? ndkVersion;
    property public abstract com.android.build.api.dsl.PackagingOptions packagingOptions;
    property public abstract org.gradle.api.NamedDomainObjectContainer<ProductFlavorT> productFlavors;
    property public abstract String? resourcePrefix;
    property @Deprecated public abstract com.android.build.api.dsl.SdkComponents sdkComponents;
    property public abstract org.gradle.api.NamedDomainObjectContainer<SigningConfigT> signingConfigs;
    property public abstract org.gradle.api.NamedDomainObjectContainer<AndroidSourceSetT> sourceSets;
    property public abstract com.android.build.api.dsl.Splits splits;
    property public abstract com.android.build.api.dsl.TestOptions testOptions;
  }

  @org.gradle.api.Incubating public interface CompileOptions {
    method public String getEncoding();
    method public org.gradle.api.JavaVersion getSourceCompatibility();
    method public org.gradle.api.JavaVersion getTargetCompatibility();
    method public boolean isCoreLibraryDesugaringEnabled();
    method public void setCoreLibraryDesugaringEnabled(boolean);
    method public void setEncoding(String);
    method public void setSourceCompatibility(org.gradle.api.JavaVersion);
    method public void setTargetCompatibility(org.gradle.api.JavaVersion);
    method public void sourceCompatibility(Object sourceCompatibility);
    method public void targetCompatibility(Object targetCompatibility);
    property public abstract String encoding;
    property public abstract boolean isCoreLibraryDesugaringEnabled;
    property public abstract org.gradle.api.JavaVersion sourceCompatibility;
    property public abstract org.gradle.api.JavaVersion targetCompatibility;
  }

  @org.gradle.api.Incubating public interface ComposeOptions {
    method public String? getKotlinCompilerExtensionVersion();
    method public String? getKotlinCompilerVersion();
    method public void setKotlinCompilerExtensionVersion(String?);
    method public void setKotlinCompilerVersion(String?);
    property public abstract String? kotlinCompilerExtensionVersion;
    property public abstract String? kotlinCompilerVersion;
  }

  @org.gradle.api.Incubating public interface DataBinding {
    method public boolean getAddDefaultAdapters();
    method public String? getVersion();
    method @Deprecated public boolean isEnabled();
    method public boolean isEnabledForTests();
    method public void setAddDefaultAdapters(boolean);
    method @Deprecated public void setEnabled(boolean);
    method public void setEnabledForTests(boolean);
    method public void setVersion(String?);
    property public abstract boolean addDefaultAdapters;
    property @Deprecated public abstract boolean isEnabled;
    property public abstract boolean isEnabledForTests;
    property public abstract String? version;
  }

  @org.gradle.api.Incubating public interface DefaultConfig extends com.android.build.api.dsl.BaseFlavor {
  }

  @org.gradle.api.Incubating public interface DensitySplit extends com.android.build.api.dsl.SplitOptions {
    method public void compatibleScreens(java.lang.String... sizes);
    method public java.util.Set<java.lang.String> getCompatibleScreens();
    method public boolean isStrict();
    method public void setStrict(boolean);
    property public abstract java.util.Set<java.lang.String> compatibleScreens;
    property public abstract boolean isStrict;
  }

  @org.gradle.api.Incubating public interface DependenciesInfo {
    method public boolean getIncludeInApk();
    method public boolean getIncludeInBundle();
    method public void setIncludeInApk(boolean);
    method public void setIncludeInBundle(boolean);
    property public abstract boolean includeInApk;
    property public abstract boolean includeInBundle;
  }

  @org.gradle.api.Incubating public interface Device extends org.gradle.api.Named {
  }

  @org.gradle.api.Incubating public interface DeviceGroup extends org.gradle.api.Named {
    method public org.gradle.api.DomainObjectSet<com.android.build.api.dsl.Device> getTargetDevices();
    property public abstract org.gradle.api.DomainObjectSet<com.android.build.api.dsl.Device> targetDevices;
  }

  @org.gradle.api.Incubating public interface DexPackagingOptions {
    method public Boolean? getUseLegacyPackaging();
    method public void setUseLegacyPackaging(Boolean?);
    property public abstract Boolean? useLegacyPackaging;
  }

  @org.gradle.api.Incubating public interface DynamicDelivery {
    method public org.gradle.api.provider.Property<java.lang.String> getDeliveryType();
    method public org.gradle.api.provider.Property<java.lang.String> getInstantDeliveryType();
    property public abstract org.gradle.api.provider.Property<java.lang.String> deliveryType;
    property public abstract org.gradle.api.provider.Property<java.lang.String> instantDeliveryType;
  }

  @org.gradle.api.Incubating public interface DynamicFeatureBaseFlavor extends com.android.build.api.dsl.BaseFlavor com.android.build.api.dsl.DynamicFeatureVariantDimension {
  }

  @org.gradle.api.Incubating public interface DynamicFeatureBuildFeatures extends com.android.build.api.dsl.BuildFeatures {
    method public Boolean? getDataBinding();
    method public Boolean? getMlModelBinding();
    method public void setDataBinding(Boolean?);
    method public void setMlModelBinding(Boolean?);
    property public abstract Boolean? dataBinding;
    property public abstract Boolean? mlModelBinding;
  }

  @org.gradle.api.Incubating public interface DynamicFeatureBuildType extends com.android.build.api.dsl.BuildType com.android.build.api.dsl.DynamicFeatureVariantDimension {
    method public Boolean? isCrunchPngs();
    method public void setCrunchPngs(Boolean?);
    property public abstract Boolean? isCrunchPngs;
  }

  @org.gradle.api.Incubating public interface DynamicFeatureDefaultConfig extends com.android.build.api.dsl.DynamicFeatureBaseFlavor com.android.build.api.dsl.DefaultConfig {
  }

  @org.gradle.api.Incubating public interface DynamicFeatureExtension<AndroidSourceSetT extends com.android.build.api.dsl.AndroidSourceSet, BuildTypeT extends com.android.build.api.dsl.DynamicFeatureBuildType, DefaultConfigT extends com.android.build.api.dsl.DefaultConfig, ProductFlavorT extends com.android.build.api.dsl.DynamicFeatureProductFlavor, SigningConfigT extends com.android.build.api.dsl.SigningConfig> extends com.android.build.api.dsl.CommonExtension<AndroidSourceSetT,com.android.build.api.dsl.DynamicFeatureBuildFeatures,BuildTypeT,DefaultConfigT,ProductFlavorT,SigningConfigT,com.android.build.api.variant.DynamicFeatureVariantBuilder,com.android.build.api.variant.DynamicFeatureVariant> com.android.build.api.dsl.ApkExtension com.android.build.api.dsl.TestedExtension {
  }

  @org.gradle.api.Incubating public interface DynamicFeatureProductFlavor extends com.android.build.api.dsl.DynamicFeatureBaseFlavor com.android.build.api.dsl.ProductFlavor {
  }

  @org.gradle.api.Incubating public interface DynamicFeatureVariantDimension extends com.android.build.api.dsl.VariantDimension {
  }

  @org.gradle.api.Incubating public interface ExternalNativeBuild {
    method public void cmake(kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.Cmake,kotlin.Unit> action);
    method public com.android.build.api.dsl.Cmake getCmake();
    method public com.android.build.api.dsl.NdkBuild getNdkBuild();
    method public void ndkBuild(kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.NdkBuild,kotlin.Unit> action);
    property public abstract com.android.build.api.dsl.Cmake cmake;
    property public abstract com.android.build.api.dsl.NdkBuild ndkBuild;
  }

  @org.gradle.api.Incubating public interface ExternalNativeBuildOptions {
    method public void cmake(kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.ExternalNativeCmakeOptions,kotlin.Unit> action);
    method public com.android.build.api.dsl.ExternalNativeCmakeOptions getCmake();
    method public com.android.build.api.dsl.ExternalNativeNdkBuildOptions getNdkBuild();
    method public void ndkBuild(kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.ExternalNativeNdkBuildOptions,kotlin.Unit> action);
    property public abstract com.android.build.api.dsl.ExternalNativeCmakeOptions cmake;
    property public abstract com.android.build.api.dsl.ExternalNativeNdkBuildOptions ndkBuild;
  }

  @org.gradle.api.Incubating public interface ExternalNativeCmakeOptions {
    method public void abiFilters(java.lang.String... abiFilters);
    method public void arguments(java.lang.String... arguments);
    method public void cFlags(java.lang.String... cFlags);
    method public void cppFlags(java.lang.String... cppFlags);
    method public java.util.Set<java.lang.String> getAbiFilters();
    method public java.util.List<java.lang.String> getArguments();
    method public java.util.List<java.lang.String> getCFlags();
    method public java.util.List<java.lang.String> getCppFlags();
    method public java.util.Set<java.lang.String> getTargets();
    method public void targets(java.lang.String... targets);
    property public abstract java.util.Set<java.lang.String> abiFilters;
    property public abstract java.util.List<java.lang.String> arguments;
    property public abstract java.util.List<java.lang.String> cFlags;
    property public abstract java.util.List<java.lang.String> cppFlags;
    property public abstract java.util.Set<java.lang.String> targets;
  }

  @org.gradle.api.Incubating public interface ExternalNativeNdkBuildOptions {
    method public void abiFilters(java.lang.String... abiFilters);
    method public void arguments(java.lang.String... arguments);
    method public void cFlags(java.lang.String... cFlags);
    method public void cppFlags(java.lang.String... cppFlags);
    method public java.util.Set<java.lang.String> getAbiFilters();
    method public java.util.List<java.lang.String> getArguments();
    method public java.util.List<java.lang.String> getCFlags();
    method public java.util.List<java.lang.String> getCppFlags();
    method public java.util.Set<java.lang.String> getTargets();
    method public void targets(java.lang.String... targets);
    property public abstract java.util.Set<java.lang.String> abiFilters;
    property public abstract java.util.List<java.lang.String> arguments;
    property public abstract java.util.List<java.lang.String> cFlags;
    property public abstract java.util.List<java.lang.String> cppFlags;
    property public abstract java.util.Set<java.lang.String> targets;
  }

  @org.gradle.api.Incubating public interface FailureRetention {
    method public boolean getCompressSnapshots();
    method public boolean getEnable();
    method public int getMaxSnapshots();
    method public void retainAll();
    method public void setCompressSnapshots(boolean);
    method public void setEnable(boolean);
    method public void setMaxSnapshots(int);
    property public abstract boolean compressSnapshots;
    property public abstract boolean enable;
    property public abstract int maxSnapshots;
  }

  @org.gradle.api.Incubating public interface JacocoOptions {
    method public String getVersion();
    method public void setVersion(String);
    property public abstract String version;
  }

  @org.gradle.api.Incubating public interface JavaCompileOptions {
    method public void annotationProcessorOptions(kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.AnnotationProcessorOptions,kotlin.Unit> action);
    method public com.android.build.api.dsl.AnnotationProcessorOptions getAnnotationProcessorOptions();
    property public abstract com.android.build.api.dsl.AnnotationProcessorOptions annotationProcessorOptions;
  }

  @org.gradle.api.Incubating public interface JniLibsPackagingOptions {
    method public java.util.Set<java.lang.String> getExcludes();
    method public java.util.Set<java.lang.String> getKeepDebugSymbols();
    method public java.util.Set<java.lang.String> getPickFirsts();
    method public Boolean? getUseLegacyPackaging();
    method public void setUseLegacyPackaging(Boolean?);
    property public abstract java.util.Set<java.lang.String> excludes;
    property public abstract java.util.Set<java.lang.String> keepDebugSymbols;
    property public abstract java.util.Set<java.lang.String> pickFirsts;
    property public abstract Boolean? useLegacyPackaging;
  }

  @org.gradle.api.Incubating public interface LibraryBaseFlavor<SigningConfigT extends com.android.build.api.dsl.SigningConfig> extends com.android.build.api.dsl.BaseFlavor com.android.build.api.dsl.LibraryVariantDimension<SigningConfigT> {
  }

  @org.gradle.api.Incubating public interface LibraryBuildFeatures extends com.android.build.api.dsl.BuildFeatures {
    method public Boolean? getAndroidResources();
    method public Boolean? getDataBinding();
    method public Boolean? getMlModelBinding();
    method public Boolean? getPrefabPublishing();
    method public void setAndroidResources(Boolean?);
    method public void setDataBinding(Boolean?);
    method public void setMlModelBinding(Boolean?);
    method public void setPrefabPublishing(Boolean?);
    property public abstract Boolean? androidResources;
    property public abstract Boolean? dataBinding;
    property public abstract Boolean? mlModelBinding;
    property public abstract Boolean? prefabPublishing;
  }

  @org.gradle.api.Incubating public interface LibraryBuildType<SigningConfigT extends com.android.build.api.dsl.SigningConfig> extends com.android.build.api.dsl.BuildType com.android.build.api.dsl.LibraryVariantDimension<SigningConfigT> {
    method public boolean isDefault();
    method public void setDefault(boolean);
    property public abstract boolean isDefault;
  }

  @org.gradle.api.Incubating public interface LibraryDefaultConfig<SigningConfigT extends com.android.build.api.dsl.SigningConfig> extends com.android.build.api.dsl.LibraryBaseFlavor<SigningConfigT> com.android.build.api.dsl.DefaultConfig {
  }

  @org.gradle.api.Incubating public interface LibraryExtension<AndroidSourceSetT extends com.android.build.api.dsl.AndroidSourceSet, BuildTypeT extends com.android.build.api.dsl.LibraryBuildType<SigningConfigT>, DefaultConfigT extends com.android.build.api.dsl.LibraryDefaultConfig<SigningConfigT>, ProductFlavorT extends com.android.build.api.dsl.LibraryProductFlavor<SigningConfigT>, SigningConfigT extends com.android.build.api.dsl.SigningConfig> extends com.android.build.api.dsl.CommonExtension<AndroidSourceSetT,com.android.build.api.dsl.LibraryBuildFeatures,BuildTypeT,DefaultConfigT,ProductFlavorT,SigningConfigT,com.android.build.api.variant.LibraryVariantBuilder,com.android.build.api.variant.LibraryVariant> com.android.build.api.dsl.TestedExtension {
    method public java.util.Collection<java.lang.String>? getAidlPackagedList();
    method public org.gradle.api.NamedDomainObjectContainer<com.android.build.api.dsl.PrefabPackagingOptions> getPrefab();
    property public abstract java.util.Collection<java.lang.String>? aidlPackagedList;
    property public abstract org.gradle.api.NamedDomainObjectContainer<com.android.build.api.dsl.PrefabPackagingOptions> prefab;
  }

  @org.gradle.api.Incubating public interface LibraryProductFlavor<SigningConfigT extends com.android.build.api.dsl.SigningConfig> extends com.android.build.api.dsl.LibraryBaseFlavor<SigningConfigT> com.android.build.api.dsl.ProductFlavor {
    method public boolean isDefault();
    method public void setDefault(boolean);
    property public abstract boolean isDefault;
  }

  @org.gradle.api.Incubating public interface LibraryVariantDimension<SigningConfigT extends com.android.build.api.dsl.SigningConfig> extends com.android.build.api.dsl.VariantDimension {
    method public void aarMetadata(kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.AarMetadata,kotlin.Unit> action);
    method public Object consumerProguardFile(Object proguardFile);
    method public Object consumerProguardFiles(java.lang.Object... proguardFiles);
    method public com.android.build.api.dsl.AarMetadata getAarMetadata();
    method public java.util.List<java.io.File> getConsumerProguardFiles();
    method public Boolean? getMultiDexEnabled();
    method public SigningConfigT? getSigningConfig();
    method public void setMultiDexEnabled(Boolean?);
    method public void setSigningConfig(SigningConfigT?);
    property public abstract com.android.build.api.dsl.AarMetadata aarMetadata;
    property public abstract java.util.List<java.io.File> consumerProguardFiles;
    property public abstract Boolean? multiDexEnabled;
    property public abstract SigningConfigT? signingConfig;
  }

  @org.gradle.api.Incubating public interface LintOptions {
    method public void baseline(java.io.File baselineFile);
    method public void baseline(String baseline);
    method @Deprecated public void check(String id);
    method @Deprecated public void check(java.lang.String... ids);
    method public void checkOnly(String id);
    method public void checkOnly(java.lang.String... ids);
    method public void disable(String id);
    method public void disable(java.lang.String... ids);
    method public void enable(String id);
    method public void enable(java.lang.String... ids);
    method public void error(String id);
    method public void error(java.lang.String... ids);
    method public void fatal(String id);
    method public void fatal(java.lang.String... ids);
    method public java.io.File? getBaselineFile();
    method public java.util.Set<java.lang.String> getCheckOnly();
    method public java.util.Set<java.lang.String> getDisable();
    method public java.util.Set<java.lang.String> getEnable();
    method public java.io.File? getHtmlOutput();
    method public boolean getHtmlReport();
    method public java.io.File? getLintConfig();
    method public java.io.File? getSarifOutput();
    method public boolean getSarifReport();
    method public java.io.File? getTextOutput();
    method public boolean getTextReport();
    method public java.io.File? getXmlOutput();
    method public boolean getXmlReport();
    method public void ignore(String id);
    method public void ignore(java.lang.String... ids);
    method public void informational(String id);
    method public void informational(java.lang.String... ids);
    method public boolean isAbortOnError();
    method public boolean isAbsolutePaths();
    method public boolean isCheckAllWarnings();
    method public boolean isCheckDependencies();
    method public boolean isCheckGeneratedSources();
    method public boolean isCheckReleaseBuilds();
    method public boolean isCheckTestSources();
    method public boolean isExplainIssues();
    method public boolean isIgnoreTestSources();
    method public boolean isIgnoreWarnings();
    method public boolean isNoLines();
    method public boolean isQuiet();
    method public boolean isShowAll();
    method public boolean isWarningsAsErrors();
    method public void setAbortOnError(boolean);
    method public void setAbsolutePaths(boolean);
    method public void setBaselineFile(java.io.File?);
    method public void setCheckAllWarnings(boolean);
    method public void setCheckDependencies(boolean);
    method public void setCheckGeneratedSources(boolean);
    method public void setCheckReleaseBuilds(boolean);
    method public void setCheckTestSources(boolean);
    method public void setExplainIssues(boolean);
    method public void setHtmlOutput(java.io.File?);
    method public void setHtmlReport(boolean);
    method public void setIgnoreTestSources(boolean);
    method public void setIgnoreWarnings(boolean);
    method public void setLintConfig(java.io.File?);
    method public void setNoLines(boolean);
    method public void setQuiet(boolean);
    method public void setSarifOutput(java.io.File?);
    method public void setSarifReport(boolean);
    method public void setShowAll(boolean);
    method public void setTextOutput(java.io.File?);
    method public void setTextReport(boolean);
    method public void setWarningsAsErrors(boolean);
    method public void setXmlOutput(java.io.File?);
    method public void setXmlReport(boolean);
    method public void textOutput(java.io.File textOutput);
    method public void textOutput(String textOutput);
    method public void warning(String id);
    method public void warning(java.lang.String... ids);
    property public abstract java.io.File? baselineFile;
    property public abstract java.util.Set<java.lang.String> checkOnly;
    property public abstract java.util.Set<java.lang.String> disable;
    property public abstract java.util.Set<java.lang.String> enable;
    property public abstract java.io.File? htmlOutput;
    property public abstract boolean htmlReport;
    property public abstract boolean isAbortOnError;
    property public abstract boolean isAbsolutePaths;
    property public abstract boolean isCheckAllWarnings;
    property public abstract boolean isCheckDependencies;
    property public abstract boolean isCheckGeneratedSources;
    property public abstract boolean isCheckReleaseBuilds;
    property public abstract boolean isCheckTestSources;
    property public abstract boolean isExplainIssues;
    property public abstract boolean isIgnoreTestSources;
    property public abstract boolean isIgnoreWarnings;
    property public abstract boolean isNoLines;
    property public abstract boolean isQuiet;
    property public abstract boolean isShowAll;
    property public abstract boolean isWarningsAsErrors;
    property public abstract java.io.File? lintConfig;
    property public abstract java.io.File? sarifOutput;
    property public abstract boolean sarifReport;
    property public abstract java.io.File? textOutput;
    property public abstract boolean textReport;
    property public abstract java.io.File? xmlOutput;
    property public abstract boolean xmlReport;
  }

  @org.gradle.api.Incubating public interface ManagedVirtualDevice extends com.android.build.api.dsl.Device {
    method public String getAbi();
    method public int getApiLevel();
    method public String getDevice();
    method public String getSystemImageSource();
    method public void setAbi(String);
    method public void setApiLevel(int);
    method public void setDevice(String);
    method public void setSystemImageSource(String);
    property public abstract String abi;
    property public abstract int apiLevel;
    property public abstract String device;
    property public abstract String systemImageSource;
  }

  @org.gradle.api.Incubating public interface Ndk {
    method public java.util.Set<java.lang.String> getAbiFilters();
    method public String? getCFlags();
    method public String? getDebugSymbolLevel();
    method public Integer? getJobs();
    method public java.util.List<java.lang.String>? getLdLibs();
    method public String? getModuleName();
    method public String? getStl();
    method public void setCFlags(String?);
    method public void setDebugSymbolLevel(String?);
    method public void setJobs(Integer?);
    method public void setModuleName(String?);
    method public void setStl(String?);
    property public abstract java.util.Set<java.lang.String> abiFilters;
    property public abstract String? cFlags;
    property public abstract String? debugSymbolLevel;
    property public abstract Integer? jobs;
    property public abstract java.util.List<java.lang.String>? ldLibs;
    property public abstract String? moduleName;
    property public abstract String? stl;
  }

  @org.gradle.api.Incubating public interface NdkBuild {
    method public void buildStagingDirectory(Object any);
    method public java.io.File? getBuildStagingDirectory();
    method public java.io.File? getPath();
    method public void path(Object any);
    method public void setBuildStagingDirectory(java.io.File?);
    method public void setPath(java.io.File?);
    property public abstract java.io.File? buildStagingDirectory;
    property public abstract java.io.File? path;
  }

  @org.gradle.api.Incubating public interface PackagingOptions {
    method public void dex(kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.DexPackagingOptions,kotlin.Unit> action);
    method public void doNotStrip(String pattern);
    method public void exclude(String pattern);
    method public com.android.build.api.dsl.DexPackagingOptions getDex();
    method public java.util.Set<java.lang.String> getDoNotStrip();
    method public java.util.Set<java.lang.String> getExcludes();
    method public com.android.build.api.dsl.JniLibsPackagingOptions getJniLibs();
    method public java.util.Set<java.lang.String> getMerges();
    method public java.util.Set<java.lang.String> getPickFirsts();
    method public com.android.build.api.dsl.ResourcesPackagingOptions getResources();
    method public void jniLibs(kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.JniLibsPackagingOptions,kotlin.Unit> action);
    method public void merge(String pattern);
    method public void pickFirst(String pattern);
    method public void resources(kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.ResourcesPackagingOptions,kotlin.Unit> action);
    property public abstract com.android.build.api.dsl.DexPackagingOptions dex;
    property public abstract java.util.Set<java.lang.String> doNotStrip;
    property public abstract java.util.Set<java.lang.String> excludes;
    property public abstract com.android.build.api.dsl.JniLibsPackagingOptions jniLibs;
    property public abstract java.util.Set<java.lang.String> merges;
    property public abstract java.util.Set<java.lang.String> pickFirsts;
    property public abstract com.android.build.api.dsl.ResourcesPackagingOptions resources;
  }

  @org.gradle.api.Incubating public interface PrefabPackagingOptions {
    method public String? getHeaders();
    method public String? getLibraryName();
    method public String getName();
    method public void setHeaders(String?);
    method public void setLibraryName(String?);
    method public void setName(String);
    property public abstract String? headers;
    property public abstract String? libraryName;
    property public abstract String name;
  }

  @org.gradle.api.Incubating public interface ProductFlavor extends org.gradle.api.Named com.android.build.api.dsl.BaseFlavor org.gradle.api.plugins.ExtensionAware {
    method public String? getDimension();
    method public java.util.List<java.lang.String> getMatchingFallbacks();
    method public void setDimension(String?);
    property public abstract String? dimension;
    property public abstract java.util.List<java.lang.String> matchingFallbacks;
  }

  @org.gradle.api.Incubating public interface ResourcesPackagingOptions {
    method public java.util.Set<java.lang.String> getExcludes();
    method public java.util.Set<java.lang.String> getMerges();
    method public java.util.Set<java.lang.String> getPickFirsts();
    property public abstract java.util.Set<java.lang.String> excludes;
    property public abstract java.util.Set<java.lang.String> merges;
    property public abstract java.util.Set<java.lang.String> pickFirsts;
  }

  @org.gradle.api.Incubating public interface SdkComponents {
    method public org.gradle.api.provider.Provider<org.gradle.api.file.RegularFile> getAdb();
    method public org.gradle.api.provider.Provider<org.gradle.api.file.Directory> getNdkDirectory();
    method public org.gradle.api.provider.Provider<org.gradle.api.file.Directory> getSdkDirectory();
    property public abstract org.gradle.api.provider.Provider<org.gradle.api.file.RegularFile> adb;
    property public abstract org.gradle.api.provider.Provider<org.gradle.api.file.Directory> ndkDirectory;
    property public abstract org.gradle.api.provider.Provider<org.gradle.api.file.Directory> sdkDirectory;
  }

  @org.gradle.api.Incubating public interface Shaders {
    method public java.util.List<java.lang.String> getGlslcArgs();
    method public com.google.common.collect.ListMultimap<java.lang.String,java.lang.String> getScopedGlslcArgs();
    method public void glslcArgs(java.lang.String... options);
    method public void glslcScopedArgs(String key, java.lang.String... options);
    property public abstract java.util.List<java.lang.String> glslcArgs;
    property public abstract com.google.common.collect.ListMultimap<java.lang.String,java.lang.String> scopedGlslcArgs;
  }

  @org.gradle.api.Incubating public interface SigningConfig extends org.gradle.api.Named {
    method public Boolean? getEnableV1Signing();
    method public Boolean? getEnableV2Signing();
    method public Boolean? getEnableV3Signing();
    method public Boolean? getEnableV4Signing();
    method public String? getKeyAlias();
    method public String? getKeyPassword();
    method public java.io.File? getStoreFile();
    method public String? getStorePassword();
    method public String? getStoreType();
    method @Deprecated public boolean isV1SigningEnabled();
    method @Deprecated public boolean isV2SigningEnabled();
    method public void setEnableV1Signing(Boolean?);
    method public void setEnableV2Signing(Boolean?);
    method public void setEnableV3Signing(Boolean?);
    method public void setEnableV4Signing(Boolean?);
    method public void setKeyAlias(String?);
    method public void setKeyPassword(String?);
    method public void setStoreFile(java.io.File?);
    method public void setStorePassword(String?);
    method public void setStoreType(String?);
    method @Deprecated public void setV1SigningEnabled(boolean);
    method @Deprecated public void setV2SigningEnabled(boolean);
    property public abstract Boolean? enableV1Signing;
    property public abstract Boolean? enableV2Signing;
    property public abstract Boolean? enableV3Signing;
    property public abstract Boolean? enableV4Signing;
    property @Deprecated public abstract boolean isV1SigningEnabled;
    property @Deprecated public abstract boolean isV2SigningEnabled;
    property public abstract String? keyAlias;
    property public abstract String? keyPassword;
    property public abstract java.io.File? storeFile;
    property public abstract String? storePassword;
    property public abstract String? storeType;
  }

  @org.gradle.api.Incubating public interface SplitOptions {
    method public void exclude(java.lang.String... excludes);
    method public void include(java.lang.String... includes);
    method public boolean isEnable();
    method public void reset();
    method public void setEnable(boolean);
    property public abstract boolean isEnable;
  }

  @org.gradle.api.Incubating public interface Splits {
    method public void abi(kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.AbiSplit,kotlin.Unit> action);
    method public void density(kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.DensitySplit,kotlin.Unit> action);
    method public com.android.build.api.dsl.AbiSplit getAbi();
    method public java.util.Collection<java.lang.String> getAbiFilters();
    method public com.android.build.api.dsl.DensitySplit getDensity();
    method public java.util.Collection<java.lang.String> getDensityFilters();
    property public abstract com.android.build.api.dsl.AbiSplit abi;
    property public abstract java.util.Collection<java.lang.String> abiFilters;
    property public abstract com.android.build.api.dsl.DensitySplit density;
    property public abstract java.util.Collection<java.lang.String> densityFilters;
  }

  @org.gradle.api.Incubating public interface TestBaseFlavor<SigningConfigT extends com.android.build.api.dsl.SigningConfig> extends com.android.build.api.dsl.BaseFlavor com.android.build.api.dsl.TestVariantDimension<SigningConfigT> {
    method public Integer? getMaxSdk();
    method public Integer? getTargetSdk();
    method public String? getTargetSdkPreview();
    method public void setMaxSdk(Integer?);
    method public void setTargetSdk(Integer?);
    method public void setTargetSdkPreview(String?);
    property public abstract Integer? maxSdk;
    property public abstract Integer? targetSdk;
    property public abstract String? targetSdkPreview;
  }

  @org.gradle.api.Incubating public interface TestBuildFeatures extends com.android.build.api.dsl.BuildFeatures {
  }

  @org.gradle.api.Incubating public interface TestBuildType<SigningConfigT extends com.android.build.api.dsl.SigningConfig> extends com.android.build.api.dsl.BuildType com.android.build.api.dsl.TestVariantDimension<SigningConfigT> {
    method public Boolean? isCrunchPngs();
    method public boolean isDebuggable();
    method public void setCrunchPngs(Boolean?);
    method public void setDebuggable(boolean);
    property public abstract Boolean? isCrunchPngs;
    property public abstract boolean isDebuggable;
  }

  @org.gradle.api.Incubating public interface TestDefaultConfig<SigningConfigT extends com.android.build.api.dsl.SigningConfig> extends com.android.build.api.dsl.TestBaseFlavor<SigningConfigT> com.android.build.api.dsl.DefaultConfig {
  }

  @org.gradle.api.Incubating public interface TestExtension<AndroidSourceSetT extends com.android.build.api.dsl.AndroidSourceSet, BuildTypeT extends com.android.build.api.dsl.TestBuildType<SigningConfigT>, DefaultConfigT extends com.android.build.api.dsl.TestDefaultConfig<SigningConfigT>, ProductFlavorT extends com.android.build.api.dsl.TestProductFlavor<SigningConfigT>, SigningConfigT extends com.android.build.api.dsl.SigningConfig> extends com.android.build.api.dsl.CommonExtension<AndroidSourceSetT,com.android.build.api.dsl.TestBuildFeatures,BuildTypeT,DefaultConfigT,ProductFlavorT,SigningConfigT,com.android.build.api.variant.TestVariantBuilder,com.android.build.api.variant.TestVariant> {
    method public String? getTargetProjectPath();
    method public void setTargetProjectPath(String?);
    property public abstract String? targetProjectPath;
  }

  @org.gradle.api.Incubating public interface TestOptions {
    method public boolean getAnimationsDisabled();
    method public org.gradle.api.NamedDomainObjectContainer<com.android.build.api.dsl.DeviceGroup> getDeviceGroups();
    method public org.gradle.api.ExtensiblePolymorphicDomainObjectContainer<com.android.build.api.dsl.Device> getDevices();
    method public String getExecution();
    method public com.android.build.api.dsl.FailureRetention getFailureRetention();
    method public String? getReportDir();
    method public String? getResultsDir();
    method public com.android.build.api.dsl.UnitTestOptions getUnitTests();
    method public void setAnimationsDisabled(boolean);
    method public void setExecution(String);
    method public void setFailureRetention(com.android.build.api.dsl.FailureRetention);
    method public void setReportDir(String?);
    method public void setResultsDir(String?);
    method public void unitTests(kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.UnitTestOptions,kotlin.Unit> action);
    property public abstract boolean animationsDisabled;
    property public abstract org.gradle.api.NamedDomainObjectContainer<com.android.build.api.dsl.DeviceGroup> deviceGroups;
    property public abstract org.gradle.api.ExtensiblePolymorphicDomainObjectContainer<com.android.build.api.dsl.Device> devices;
    property public abstract String execution;
    property public abstract com.android.build.api.dsl.FailureRetention failureRetention;
    property public abstract String? reportDir;
    property public abstract String? resultsDir;
    property public abstract com.android.build.api.dsl.UnitTestOptions unitTests;
  }

  @org.gradle.api.Incubating public interface TestProductFlavor<SigningConfigT extends com.android.build.api.dsl.SigningConfig> extends com.android.build.api.dsl.TestBaseFlavor<SigningConfigT> com.android.build.api.dsl.ProductFlavor {
  }

  @org.gradle.api.Incubating public interface TestVariantDimension<SigningConfigT extends com.android.build.api.dsl.SigningConfig> extends com.android.build.api.dsl.VariantDimension {
    method public Boolean? getMultiDexEnabled();
    method public SigningConfigT? getSigningConfig();
    method public void setMultiDexEnabled(Boolean?);
    method public void setSigningConfig(SigningConfigT?);
    property public abstract Boolean? multiDexEnabled;
    property public abstract SigningConfigT? signingConfig;
  }

  @org.gradle.api.Incubating public interface TestedExtension {
    method public String getTestBuildType();
    method public void setTestBuildType(String);
    property public abstract String testBuildType;
  }

  @org.gradle.api.Incubating public interface UnitTestOptions {
    method public void all(kotlin.jvm.functions.Function1<? super org.gradle.api.tasks.testing.Test,kotlin.Unit> configAction);
    method public boolean isIncludeAndroidResources();
    method public boolean isReturnDefaultValues();
    method public void setIncludeAndroidResources(boolean);
    method public void setReturnDefaultValues(boolean);
    property public abstract boolean isIncludeAndroidResources;
    property public abstract boolean isReturnDefaultValues;
  }

  @org.gradle.api.Incubating public interface VariantDimension {
    method public void addManifestPlaceholders(java.util.Map<java.lang.String,?> manifestPlaceholders);
    method public void buildConfigField(String type, String name, String value);
    method public void externalNativeBuild(kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.ExternalNativeBuildOptions,kotlin.Unit> action);
    method public com.android.build.api.dsl.ExternalNativeBuildOptions getExternalNativeBuild();
    method public com.android.build.api.dsl.JavaCompileOptions getJavaCompileOptions();
    method public java.util.Map<java.lang.String,java.lang.Object> getManifestPlaceholders();
    method public java.io.File? getMultiDexKeepFile();
    method public java.io.File? getMultiDexKeepProguard();
    method public com.android.build.api.dsl.Ndk getNdk();
    method public java.util.List<java.io.File> getProguardFiles();
    method public com.android.build.api.dsl.Shaders getShaders();
    method public java.util.List<java.io.File> getTestProguardFiles();
    method public void javaCompileOptions(kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.JavaCompileOptions,kotlin.Unit> action);
    method public void ndk(kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.Ndk,kotlin.Unit> action);
    method public Object proguardFile(Object proguardFile);
    method public Object proguardFiles(java.lang.Object... files);
    method public void resValue(String type, String name, String value);
    method public void setMultiDexKeepFile(java.io.File?);
    method public void setMultiDexKeepProguard(java.io.File?);
    method public void shaders(kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.Shaders,kotlin.Unit> action);
    method public Object testProguardFile(Object proguardFile);
    method public Object testProguardFiles(java.lang.Object... proguardFiles);
    property public abstract com.android.build.api.dsl.ExternalNativeBuildOptions externalNativeBuild;
    property public abstract com.android.build.api.dsl.JavaCompileOptions javaCompileOptions;
    property public abstract java.util.Map<java.lang.String,java.lang.Object> manifestPlaceholders;
    property public abstract java.io.File? multiDexKeepFile;
    property public abstract java.io.File? multiDexKeepProguard;
    property public abstract com.android.build.api.dsl.Ndk ndk;
    property public abstract java.util.List<java.io.File> proguardFiles;
    property public abstract com.android.build.api.dsl.Shaders shaders;
    property public abstract java.util.List<java.io.File> testProguardFiles;
  }

  @org.gradle.api.Incubating public interface VectorDrawables {
    method public void generatedDensities(java.lang.String... densities);
    method public java.util.Set<java.lang.String>? getGeneratedDensities();
    method public Boolean? getUseSupportLibrary();
    method public void setUseSupportLibrary(Boolean?);
    property public abstract java.util.Set<java.lang.String>? generatedDensities;
    property public abstract Boolean? useSupportLibrary;
  }

}

package com.android.build.api.extension {

  @org.gradle.api.Incubating public interface AndroidComponentsExtension<VariantBuilderT extends com.android.build.api.variant.VariantBuilder, VariantT extends com.android.build.api.variant.Variant> {
    method public void androidTests(optional com.android.build.api.extension.VariantSelector selector, kotlin.jvm.functions.Function1<? super com.android.build.api.component.AndroidTest,kotlin.Unit> callback);
    method public void androidTests(optional com.android.build.api.extension.VariantSelector selector, org.gradle.api.Action<com.android.build.api.component.AndroidTest> callback);
    method public void beforeAndroidTests(optional com.android.build.api.extension.VariantSelector selector, kotlin.jvm.functions.Function1<? super com.android.build.api.component.AndroidTestBuilder,kotlin.Unit> callback);
    method public void beforeAndroidTests(optional com.android.build.api.extension.VariantSelector selector, org.gradle.api.Action<com.android.build.api.component.AndroidTestBuilder> callback);
    method public void beforeUnitTests(optional com.android.build.api.extension.VariantSelector selector, kotlin.jvm.functions.Function1<? super com.android.build.api.component.UnitTestBuilder,kotlin.Unit> callback);
    method public void beforeUnitTests(optional com.android.build.api.extension.VariantSelector selector, org.gradle.api.Action<com.android.build.api.component.UnitTestBuilder> callback);
    method public void beforeVariants(optional com.android.build.api.extension.VariantSelector selector, kotlin.jvm.functions.Function1<? super VariantBuilderT,kotlin.Unit> callback);
    method public void beforeVariants(optional com.android.build.api.extension.VariantSelector selector, org.gradle.api.Action<VariantBuilderT> callback);
    method public com.android.build.api.dsl.SdkComponents getSdkComponents();
    method public void onVariants(optional com.android.build.api.extension.VariantSelector selector, kotlin.jvm.functions.Function1<? super VariantT,kotlin.Unit> callback);
    method public void onVariants(optional com.android.build.api.extension.VariantSelector selector, org.gradle.api.Action<VariantT> callback);
    method public com.android.build.api.extension.VariantSelector selector();
    method public void unitTests(optional com.android.build.api.extension.VariantSelector selector, kotlin.jvm.functions.Function1<? super com.android.build.api.component.UnitTest,kotlin.Unit> callback);
    method public void unitTests(optional com.android.build.api.extension.VariantSelector selector, org.gradle.api.Action<com.android.build.api.component.UnitTest> callback);
    property public abstract com.android.build.api.dsl.SdkComponents sdkComponents;
  }

  @org.gradle.api.Incubating public interface ApplicationAndroidComponentsExtension extends com.android.build.api.extension.AndroidComponentsExtension<com.android.build.api.variant.ApplicationVariantBuilder,com.android.build.api.variant.ApplicationVariant> {
  }

  @org.gradle.api.Incubating public interface DynamicFeatureAndroidComponentsExtension extends com.android.build.api.extension.AndroidComponentsExtension<com.android.build.api.variant.DynamicFeatureVariantBuilder,com.android.build.api.variant.DynamicFeatureVariant> {
  }

  @org.gradle.api.Incubating public interface LibraryAndroidComponentsExtension extends com.android.build.api.extension.AndroidComponentsExtension<com.android.build.api.variant.LibraryVariantBuilder,com.android.build.api.variant.LibraryVariant> {
  }

  @org.gradle.api.Incubating public interface TestAndroidComponentsExtension extends com.android.build.api.extension.AndroidComponentsExtension<com.android.build.api.variant.TestVariantBuilder,com.android.build.api.variant.TestVariant> {
  }

  @org.gradle.api.Incubating public interface VariantSelector {
    method public com.android.build.api.extension.VariantSelector all();
    method public com.android.build.api.extension.VariantSelector withBuildType(String buildType);
    method public com.android.build.api.extension.VariantSelector withFlavor(kotlin.Pair<java.lang.String,java.lang.String> flavorToDimension);
    method public com.android.build.api.extension.VariantSelector withName(String name);
    method public com.android.build.api.extension.VariantSelector withName(java.util.regex.Pattern pattern);
  }

}

package com.android.build.api.instrumentation {

  @org.gradle.api.Incubating public interface AsmClassVisitorFactory<ParametersT extends com.android.build.api.instrumentation.InstrumentationParameters> extends java.io.Serializable {
    method public org.objectweb.asm.ClassVisitor createClassVisitor(com.android.build.api.instrumentation.ClassContext classContext, org.objectweb.asm.ClassVisitor nextClassVisitor);
    method @org.gradle.api.tasks.Nested public com.android.build.api.instrumentation.InstrumentationContext getInstrumentationContext();
    method @org.gradle.api.tasks.Nested public org.gradle.api.provider.Property<ParametersT> getParameters();
    method public boolean isInstrumentable(com.android.build.api.instrumentation.ClassData classData);
    property @org.gradle.api.tasks.Nested public abstract com.android.build.api.instrumentation.InstrumentationContext instrumentationContext;
    property @org.gradle.api.tasks.Nested public abstract org.gradle.api.provider.Property<ParametersT> parameters;
  }

  @org.gradle.api.Incubating public interface ClassContext {
    method public com.android.build.api.instrumentation.ClassData getCurrentClassData();
    method public com.android.build.api.instrumentation.ClassData? loadClassData(String className);
    property public abstract com.android.build.api.instrumentation.ClassData currentClassData;
  }

  @org.gradle.api.Incubating public interface ClassData {
    method public java.util.List<java.lang.String> getClassAnnotations();
    method public String getClassName();
    method public java.util.List<java.lang.String> getInterfaces();
    method public java.util.List<java.lang.String> getSuperClasses();
    property public abstract java.util.List<java.lang.String> classAnnotations;
    property public abstract String className;
    property public abstract java.util.List<java.lang.String> interfaces;
    property public abstract java.util.List<java.lang.String> superClasses;
  }

  @org.gradle.api.Incubating public enum FramesComputationMode {
    method public static com.android.build.api.instrumentation.FramesComputationMode valueOf(String value) throws java.lang.IllegalArgumentException, java.lang.NullPointerException;
    method public static com.android.build.api.instrumentation.FramesComputationMode[] values();
    enum_constant public static final com.android.build.api.instrumentation.FramesComputationMode COMPUTE_FRAMES_FOR_ALL_CLASSES;
    enum_constant public static final com.android.build.api.instrumentation.FramesComputationMode COMPUTE_FRAMES_FOR_INSTRUMENTED_CLASSES;
    enum_constant public static final com.android.build.api.instrumentation.FramesComputationMode COMPUTE_FRAMES_FOR_INSTRUMENTED_METHODS;
    enum_constant public static final com.android.build.api.instrumentation.FramesComputationMode COPY_FRAMES;
  }

  @org.gradle.api.Incubating public interface InstrumentationContext extends java.io.Serializable {
    method @org.gradle.api.tasks.Input public org.gradle.api.provider.Property<java.lang.Integer> getApiVersion();
    property @org.gradle.api.tasks.Input public abstract org.gradle.api.provider.Property<java.lang.Integer> apiVersion;
  }

  @org.gradle.api.Incubating public interface InstrumentationParameters extends java.io.Serializable {
  }

  @org.gradle.api.Incubating public static final class InstrumentationParameters.None implements com.android.build.api.instrumentation.InstrumentationParameters {
    ctor public InstrumentationParameters.None();
  }

  @org.gradle.api.Incubating public enum InstrumentationScope {
    method public static com.android.build.api.instrumentation.InstrumentationScope valueOf(String value) throws java.lang.IllegalArgumentException, java.lang.NullPointerException;
    method public static com.android.build.api.instrumentation.InstrumentationScope[] values();
    enum_constant public static final com.android.build.api.instrumentation.InstrumentationScope ALL;
    enum_constant public static final com.android.build.api.instrumentation.InstrumentationScope PROJECT;
  }

}

package com.android.build.api.transform {

  public interface Context {
    method public org.gradle.api.logging.LoggingManager! getLogging();
    method public String! getPath();
    method public String! getProjectName();
    method public java.io.File! getTemporaryDir();
    method public String getVariantName();
    method public org.gradle.workers.WorkerExecutor getWorkerExecutor();
  }

  public interface DirectoryInput extends com.android.build.api.transform.QualifiedContent {
    method public java.util.Map<java.io.File!,com.android.build.api.transform.Status!> getChangedFiles();
  }

  public enum Format {
    enum_constant public static final com.android.build.api.transform.Format DIRECTORY;
    enum_constant public static final com.android.build.api.transform.Format JAR;
  }

  public interface JarInput extends com.android.build.api.transform.QualifiedContent {
    method public com.android.build.api.transform.Status getStatus();
  }

  public interface QualifiedContent {
    method public java.util.Set<com.android.build.api.transform.QualifiedContent.ContentType!> getContentTypes();
    method public java.io.File getFile();
    method public String getName();
    method public java.util.Set<? super com.android.build.api.transform.QualifiedContent.Scope> getScopes();
  }

  public static interface QualifiedContent.ContentType {
    method public int getValue();
    method public String! name();
  }

  public enum QualifiedContent.DefaultContentType implements com.android.build.api.transform.QualifiedContent.ContentType {
    method public int getValue();
    enum_constant public static final com.android.build.api.transform.QualifiedContent.DefaultContentType CLASSES;
    enum_constant public static final com.android.build.api.transform.QualifiedContent.DefaultContentType RESOURCES;
  }

  public enum QualifiedContent.Scope implements com.android.build.api.transform.QualifiedContent.ScopeType {
    method public int getValue();
    enum_constant public static final com.android.build.api.transform.QualifiedContent.Scope EXTERNAL_LIBRARIES;
    enum_constant public static final com.android.build.api.transform.QualifiedContent.Scope PROJECT;
    enum_constant @Deprecated public static final com.android.build.api.transform.QualifiedContent.Scope PROJECT_LOCAL_DEPS;
    enum_constant public static final com.android.build.api.transform.QualifiedContent.Scope PROVIDED_ONLY;
    enum_constant public static final com.android.build.api.transform.QualifiedContent.Scope SUB_PROJECTS;
    enum_constant @Deprecated public static final com.android.build.api.transform.QualifiedContent.Scope SUB_PROJECTS_LOCAL_DEPS;
    enum_constant public static final com.android.build.api.transform.QualifiedContent.Scope TESTED_CODE;
  }

  public static interface QualifiedContent.ScopeType {
    method public int getValue();
    method public String! name();
  }

  public class SecondaryFile {
    ctor public SecondaryFile(java.io.File, boolean);
    method @Deprecated public java.io.File! getFile();
    method public org.gradle.api.file.FileCollection? getFileCollection();
    method public org.gradle.api.file.FileCollection! getFileCollection(org.gradle.api.Project);
    method @Deprecated public static com.android.build.api.transform.SecondaryFile! incremental(java.io.File);
    method public static com.android.build.api.transform.SecondaryFile! incremental(java.util.function.Supplier<org.gradle.api.file.FileCollection!>);
    method public static com.android.build.api.transform.SecondaryFile! incremental(org.gradle.api.file.FileCollection);
    method @Deprecated public static com.android.build.api.transform.SecondaryFile! nonIncremental(java.io.File);
    method public static com.android.build.api.transform.SecondaryFile! nonIncremental(java.util.function.Supplier<org.gradle.api.file.FileCollection!>);
    method public static com.android.build.api.transform.SecondaryFile! nonIncremental(org.gradle.api.file.FileCollection);
    method public boolean supportsIncrementalBuild();
  }

  public interface SecondaryInput {
    method public com.android.build.api.transform.SecondaryFile! getSecondaryInput();
    method public com.android.build.api.transform.Status! getStatus();
  }

  public enum Status {
    enum_constant public static final com.android.build.api.transform.Status ADDED;
    enum_constant public static final com.android.build.api.transform.Status CHANGED;
    enum_constant public static final com.android.build.api.transform.Status NOTCHANGED;
    enum_constant public static final com.android.build.api.transform.Status REMOVED;
  }

  public abstract class Transform {
    ctor public Transform();
    method @org.gradle.api.Incubating public boolean applyToVariant(com.android.build.api.variant.VariantInfo);
    method public abstract java.util.Set<com.android.build.api.transform.QualifiedContent.ContentType!> getInputTypes();
    method public abstract String getName();
    method public java.util.Set<com.android.build.api.transform.QualifiedContent.ContentType!> getOutputTypes();
    method public java.util.Map<java.lang.String!,java.lang.Object!> getParameterInputs();
    method public java.util.Set<? super com.android.build.api.transform.QualifiedContent.Scope> getReferencedScopes();
    method public abstract java.util.Set<? super com.android.build.api.transform.QualifiedContent.Scope> getScopes();
    method public java.util.Collection<java.io.File!> getSecondaryDirectoryOutputs();
    method @Deprecated public java.util.Collection<java.io.File!> getSecondaryFileInputs();
    method public java.util.Collection<java.io.File!> getSecondaryFileOutputs();
    method public java.util.Collection<com.android.build.api.transform.SecondaryFile!> getSecondaryFiles();
    method public boolean isCacheable();
    method public abstract boolean isIncremental();
    method public void setOutputDirectory(org.gradle.api.provider.Property<org.gradle.api.file.Directory!>);
    method public void setOutputFile(org.gradle.api.provider.Property<org.gradle.api.file.RegularFile!>);
    method @Deprecated public void transform(com.android.build.api.transform.Context, java.util.Collection<com.android.build.api.transform.TransformInput!>, java.util.Collection<com.android.build.api.transform.TransformInput!>, com.android.build.api.transform.TransformOutputProvider?, boolean) throws java.io.IOException, java.lang.InterruptedException, com.android.build.api.transform.TransformException;
    method public void transform(com.android.build.api.transform.TransformInvocation) throws java.io.IOException, java.lang.InterruptedException, com.android.build.api.transform.TransformException;
  }

  public class TransformException extends java.lang.Exception {
    ctor public TransformException(String!);
    ctor public TransformException(String!, Throwable!);
    ctor public TransformException(Throwable!);
  }

  public interface TransformInput {
    method public java.util.Collection<com.android.build.api.transform.DirectoryInput!> getDirectoryInputs();
    method public java.util.Collection<com.android.build.api.transform.JarInput!> getJarInputs();
  }

  public interface TransformInvocation {
    method public com.android.build.api.transform.Context getContext();
    method public java.util.Collection<com.android.build.api.transform.TransformInput!> getInputs();
    method public com.android.build.api.transform.TransformOutputProvider? getOutputProvider();
    method public java.util.Collection<com.android.build.api.transform.TransformInput!> getReferencedInputs();
    method public java.util.Collection<com.android.build.api.transform.SecondaryInput!> getSecondaryInputs();
    method public boolean isIncremental();
  }

  public interface TransformOutputProvider {
    method public void deleteAll() throws java.io.IOException;
    method public java.io.File getContentLocation(String, java.util.Set<com.android.build.api.transform.QualifiedContent.ContentType!>, java.util.Set<? super com.android.build.api.transform.QualifiedContent.Scope>, com.android.build.api.transform.Format);
  }

}

package com.android.build.api.variant {

  @org.gradle.api.Incubating public interface AaptOptions {
    method public org.gradle.api.provider.ListProperty<java.lang.String> getAdditionalParameters();
    method public org.gradle.api.provider.ListProperty<java.lang.String> getIgnoreAssetsPatterns();
    property public abstract org.gradle.api.provider.ListProperty<java.lang.String> additionalParameters;
    property public abstract org.gradle.api.provider.ListProperty<java.lang.String> ignoreAssetsPatterns;
  }

  @org.gradle.api.Incubating public class AndroidVersion {
    ctor public AndroidVersion(int apiLevel, optional String? codename);
    method public final int getApiLevel();
    method public final String? getCodename();
    property public final int apiLevel;
    property public final String? codename;
  }

  @org.gradle.api.Incubating public interface ApkPackagingOptions extends com.android.build.api.variant.PackagingOptions {
    method public void dex(kotlin.jvm.functions.Function1<? super com.android.build.api.variant.DexPackagingOptions,kotlin.Unit> action);
    method public com.android.build.api.variant.DexPackagingOptions getDex();
    method public com.android.build.api.variant.JniLibsApkPackagingOptions getJniLibs();
    method public void jniLibs(kotlin.jvm.functions.Function1<? super com.android.build.api.variant.JniLibsApkPackagingOptions,kotlin.Unit> action);
    property public abstract com.android.build.api.variant.DexPackagingOptions dex;
    property public abstract com.android.build.api.variant.JniLibsApkPackagingOptions jniLibs;
  }

  @org.gradle.api.Incubating public interface ApplicationVariant extends com.android.build.api.variant.Variant {
    method public void aaptOptions(kotlin.jvm.functions.Function1<? super com.android.build.api.variant.AaptOptions,kotlin.Unit> action);
    method public com.android.build.api.variant.AaptOptions getAaptOptions();
    method public org.gradle.api.provider.Property<java.lang.String> getApplicationId();
    method public com.android.build.api.variant.DependenciesInfo getDependenciesInfo();
    method public java.util.List<com.android.build.api.variant.VariantOutput> getOutputs();
    method public com.android.build.api.variant.ApkPackagingOptions getPackagingOptions();
    method public com.android.build.api.variant.SigningConfig getSigningConfig();
    method public void packagingOptions(kotlin.jvm.functions.Function1<? super com.android.build.api.variant.ApkPackagingOptions,kotlin.Unit> action);
    method public void signingConfig(kotlin.jvm.functions.Function1<? super com.android.build.api.variant.SigningConfig,kotlin.Unit> action);
    property public abstract com.android.build.api.variant.AaptOptions aaptOptions;
    property public abstract org.gradle.api.provider.Property<java.lang.String> applicationId;
    property public abstract com.android.build.api.variant.DependenciesInfo dependenciesInfo;
    property public abstract java.util.List<com.android.build.api.variant.VariantOutput> outputs;
    property public abstract com.android.build.api.variant.ApkPackagingOptions packagingOptions;
    property public abstract com.android.build.api.variant.SigningConfig signingConfig;
  }

  @org.gradle.api.Incubating public interface ApplicationVariantBuilder extends com.android.build.api.variant.VariantBuilder {
    method public void dependenciesInfo(kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.DependenciesInfo,kotlin.Unit> action);
    method public boolean getDebuggable();
    method public com.android.build.api.dsl.DependenciesInfo getDependenciesInfo();
    property public abstract boolean debuggable;
    property public abstract com.android.build.api.dsl.DependenciesInfo dependenciesInfo;
  }

  @org.gradle.api.Incubating public final class BuildConfigField<T extends java.io.Serializable> implements java.io.Serializable {
    ctor public BuildConfigField(String type, T value, String? comment);
    method public String component1();
    method public T component2();
    method public String? component3();
    method public com.android.build.api.variant.BuildConfigField<T> copy(String type, T value, String? comment);
    method public String? getComment();
    method public String getType();
    method public T getValue();
    property public final String? comment;
    property public final String type;
    property public final T value;
  }

  @org.gradle.api.Incubating public interface BuiltArtifact extends com.android.build.api.variant.VariantOutputConfiguration {
    method public String getOutputFile();
    method public Integer? getVersionCode();
    method public String? getVersionName();
    property public abstract String outputFile;
    property public abstract Integer? versionCode;
    property public abstract String? versionName;
  }

  @org.gradle.api.Incubating public interface BuiltArtifacts {
    method public String getApplicationId();
    method public com.android.build.api.artifact.Artifact<?> getArtifactType();
    method public java.util.Collection<com.android.build.api.variant.BuiltArtifact> getElements();
    method public String getVariantName();
    method public void save(org.gradle.api.file.Directory out);
    property public abstract String applicationId;
    property public abstract com.android.build.api.artifact.Artifact<?> artifactType;
    property public abstract java.util.Collection<com.android.build.api.variant.BuiltArtifact> elements;
    property public abstract String variantName;
    field public static final com.android.build.api.variant.BuiltArtifacts.Companion Companion;
    field public static final int METADATA_FILE_VERSION = 2; // 0x2
  }

  @org.gradle.api.Incubating public static final class BuiltArtifacts.Companion {
    field public static final int METADATA_FILE_VERSION = 2; // 0x2
  }

  @org.gradle.api.Incubating public static interface BuiltArtifacts.TransformParams extends org.gradle.workers.WorkParameters java.io.Serializable {
    method public java.io.File getOutput();
    property public abstract java.io.File output;
  }

  @org.gradle.api.Incubating public interface BuiltArtifactsLoader {
    method public com.android.build.api.variant.BuiltArtifacts? load(org.gradle.api.file.Directory folder);
    method public com.android.build.api.variant.BuiltArtifacts? load(org.gradle.api.file.FileCollection fileCollection);
  }

  @org.gradle.api.Incubating public interface DependenciesInfo {
    method public boolean getIncludeInApk();
    method public boolean getIncludeInBundle();
    property public abstract boolean includeInApk;
    property public abstract boolean includeInBundle;
  }

  @org.gradle.api.Incubating public interface DexPackagingOptions {
    method public org.gradle.api.provider.Property<java.lang.Boolean> getUseLegacyPackaging();
    property public abstract org.gradle.api.provider.Property<java.lang.Boolean> useLegacyPackaging;
  }

  @org.gradle.api.Incubating public interface DynamicFeatureVariant extends com.android.build.api.variant.Variant {
    method public void aaptOptions(kotlin.jvm.functions.Function1<? super com.android.build.api.variant.AaptOptions,kotlin.Unit> action);
    method public com.android.build.api.variant.AaptOptions getAaptOptions();
    method public com.android.build.api.variant.ApkPackagingOptions getPackagingOptions();
    method public void packagingOptions(kotlin.jvm.functions.Function1<? super com.android.build.api.variant.ApkPackagingOptions,kotlin.Unit> action);
    property public abstract com.android.build.api.variant.AaptOptions aaptOptions;
    property public abstract org.gradle.api.provider.Provider<java.lang.String> applicationId;
    property public abstract com.android.build.api.variant.ApkPackagingOptions packagingOptions;
  }

  @org.gradle.api.Incubating public interface DynamicFeatureVariantBuilder extends com.android.build.api.variant.VariantBuilder {
  }

  @org.gradle.api.Incubating public final class FilterConfiguration implements java.io.Serializable {
    ctor public FilterConfiguration(com.android.build.api.variant.FilterConfiguration.FilterType filterType, String identifier);
    method public com.android.build.api.variant.FilterConfiguration.FilterType component1();
    method public String component2();
    method public com.android.build.api.variant.FilterConfiguration copy(com.android.build.api.variant.FilterConfiguration.FilterType filterType, String identifier);
    method @org.gradle.api.tasks.Input public com.android.build.api.variant.FilterConfiguration.FilterType getFilterType();
    method @org.gradle.api.tasks.Input public String getIdentifier();
    property @org.gradle.api.tasks.Input public final com.android.build.api.variant.FilterConfiguration.FilterType filterType;
    property @org.gradle.api.tasks.Input public final String identifier;
  }

  @org.gradle.api.Incubating public enum FilterConfiguration.FilterType {
    method public static com.android.build.api.variant.FilterConfiguration.FilterType valueOf(String value) throws java.lang.IllegalArgumentException, java.lang.NullPointerException;
    method public static com.android.build.api.variant.FilterConfiguration.FilterType[] values();
    enum_constant public static final com.android.build.api.variant.FilterConfiguration.FilterType ABI;
    enum_constant public static final com.android.build.api.variant.FilterConfiguration.FilterType DENSITY;
    enum_constant public static final com.android.build.api.variant.FilterConfiguration.FilterType LANGUAGE;
  }

  @org.gradle.api.Incubating public interface JniLibsApkPackagingOptions extends com.android.build.api.variant.JniLibsPackagingOptions {
    method public org.gradle.api.provider.Property<java.lang.Boolean> getUseLegacyPackaging();
    property public abstract org.gradle.api.provider.Property<java.lang.Boolean> useLegacyPackaging;
  }

  @org.gradle.api.Incubating public interface JniLibsPackagingOptions {
    method public org.gradle.api.provider.SetProperty<java.lang.String> getExcludes();
    method public org.gradle.api.provider.SetProperty<java.lang.String> getKeepDebugSymbols();
    method public org.gradle.api.provider.SetProperty<java.lang.String> getPickFirsts();
    property public abstract org.gradle.api.provider.SetProperty<java.lang.String> excludes;
    property public abstract org.gradle.api.provider.SetProperty<java.lang.String> keepDebugSymbols;
    property public abstract org.gradle.api.provider.SetProperty<java.lang.String> pickFirsts;
  }

  @org.gradle.api.Incubating public interface LibraryPackagingOptions extends com.android.build.api.variant.PackagingOptions {
    method public void jniLibs(kotlin.jvm.functions.Function1<? super com.android.build.api.variant.JniLibsPackagingOptions,kotlin.Unit> action);
  }

  @org.gradle.api.Incubating public interface LibraryVariant extends com.android.build.api.variant.Variant {
    method public com.android.build.api.variant.LibraryPackagingOptions getPackagingOptions();
    method public void packagingOptions(kotlin.jvm.functions.Function1<? super com.android.build.api.variant.LibraryPackagingOptions,kotlin.Unit> action);
    property public abstract org.gradle.api.provider.Provider<java.lang.String> applicationId;
    property public abstract com.android.build.api.variant.LibraryPackagingOptions packagingOptions;
  }

  @org.gradle.api.Incubating public interface LibraryVariantBuilder extends com.android.build.api.variant.VariantBuilder {
  }

  @org.gradle.api.Incubating public interface PackagingOptions {
    method public com.android.build.api.variant.JniLibsPackagingOptions getJniLibs();
    method public com.android.build.api.variant.ResourcesPackagingOptions getResources();
    method public void resources(kotlin.jvm.functions.Function1<? super com.android.build.api.variant.ResourcesPackagingOptions,kotlin.Unit> action);
    property public abstract com.android.build.api.variant.JniLibsPackagingOptions jniLibs;
    property public abstract com.android.build.api.variant.ResourcesPackagingOptions resources;
  }

  @org.gradle.api.Incubating public interface ResourcesPackagingOptions {
    method public org.gradle.api.provider.SetProperty<java.lang.String> getExcludes();
    method public org.gradle.api.provider.SetProperty<java.lang.String> getMerges();
    method public org.gradle.api.provider.SetProperty<java.lang.String> getPickFirsts();
    property public abstract org.gradle.api.provider.SetProperty<java.lang.String> excludes;
    property public abstract org.gradle.api.provider.SetProperty<java.lang.String> merges;
    property public abstract org.gradle.api.provider.SetProperty<java.lang.String> pickFirsts;
  }

  @org.gradle.api.Incubating public interface SigningConfig {
    method public org.gradle.api.provider.Property<java.lang.Boolean> getEnableV1Signing();
    method public org.gradle.api.provider.Property<java.lang.Boolean> getEnableV2Signing();
    method public org.gradle.api.provider.Property<java.lang.Boolean> getEnableV3Signing();
    method public org.gradle.api.provider.Property<java.lang.Boolean> getEnableV4Signing();
    property public abstract org.gradle.api.provider.Property<java.lang.Boolean> enableV1Signing;
    property public abstract org.gradle.api.provider.Property<java.lang.Boolean> enableV2Signing;
    property public abstract org.gradle.api.provider.Property<java.lang.Boolean> enableV3Signing;
    property public abstract org.gradle.api.provider.Property<java.lang.Boolean> enableV4Signing;
  }

  @org.gradle.api.Incubating public interface TestVariant extends com.android.build.api.variant.Variant {
    method public void aaptOptions(kotlin.jvm.functions.Function1<? super com.android.build.api.variant.AaptOptions,kotlin.Unit> action);
    method public com.android.build.api.variant.AaptOptions getAaptOptions();
    method public org.gradle.api.provider.Property<java.lang.String> getApplicationId();
    method public org.gradle.api.provider.Property<java.lang.Boolean> getFunctionalTest();
    method public org.gradle.api.provider.Property<java.lang.Boolean> getHandleProfiling();
    method public org.gradle.api.provider.Property<java.lang.String> getInstrumentationRunner();
    method public com.android.build.api.variant.ApkPackagingOptions getPackagingOptions();
    method public org.gradle.api.provider.Property<java.lang.String> getTestLabel();
    method public org.gradle.api.provider.Provider<java.lang.String> getTestedApplicationId();
    method public void packagingOptions(kotlin.jvm.functions.Function1<? super com.android.build.api.variant.ApkPackagingOptions,kotlin.Unit> action);
    property public abstract com.android.build.api.variant.AaptOptions aaptOptions;
    property public abstract org.gradle.api.provider.Property<java.lang.String> applicationId;
    property public abstract org.gradle.api.provider.Property<java.lang.Boolean> functionalTest;
    property public abstract org.gradle.api.provider.Property<java.lang.Boolean> handleProfiling;
    property public abstract org.gradle.api.provider.Property<java.lang.String> instrumentationRunner;
    property public abstract com.android.build.api.variant.ApkPackagingOptions packagingOptions;
    property public abstract org.gradle.api.provider.Property<java.lang.String> testLabel;
    property public abstract org.gradle.api.provider.Provider<java.lang.String> testedApplicationId;
  }

  @org.gradle.api.Incubating public interface TestVariantBuilder extends com.android.build.api.variant.VariantBuilder {
  }

  @org.gradle.api.Incubating public interface Variant extends com.android.build.api.component.Component {
    method public void addBuildConfigField(String key, java.io.Serializable value, String? comment);
    method public void addResValue(String name, String type, String value, String? comment);
    method public void addResValue(String name, String type, org.gradle.api.provider.Provider<java.lang.String> value, String? comment);
    method public org.gradle.api.provider.Provider<java.lang.String> getApplicationId();
    method public org.gradle.api.provider.MapProperty<java.lang.String,com.android.build.api.variant.BuildConfigField<? extends java.io.Serializable>> getBuildConfigFields();
    method public org.gradle.api.provider.MapProperty<java.lang.String,java.lang.String> getManifestPlaceholders();
    method public org.gradle.api.provider.Provider<java.lang.String> getPackageName();
    method public com.android.build.api.variant.PackagingOptions getPackagingOptions();
    property public abstract org.gradle.api.provider.Provider<java.lang.String> applicationId;
    property public abstract org.gradle.api.provider.MapProperty<java.lang.String,com.android.build.api.variant.BuildConfigField<? extends java.io.Serializable>> buildConfigFields;
    property public abstract org.gradle.api.provider.MapProperty<java.lang.String,java.lang.String> manifestPlaceholders;
    property public abstract org.gradle.api.provider.Provider<java.lang.String> packageName;
    property public abstract com.android.build.api.variant.PackagingOptions packagingOptions;
  }

  @org.gradle.api.Incubating public interface VariantBuilder extends com.android.build.api.component.ComponentBuilder com.android.build.api.component.ActionableComponentObject {
    method public Integer? getMaxSdkVersion();
    method public com.android.build.api.variant.AndroidVersion getMinSdkVersion();
    method public int getRenderscriptTargetApi();
    method public void setMaxSdkVersion(Integer?);
    method public void setMinSdkVersion(com.android.build.api.variant.AndroidVersion);
    method public void setRenderscriptTargetApi(int);
    property public abstract Integer? maxSdkVersion;
    property public abstract com.android.build.api.variant.AndroidVersion minSdkVersion;
    property public abstract int renderscriptTargetApi;
  }

  public interface VariantFilter {
    method public com.android.builder.model.BuildType getBuildType();
    method public com.android.builder.model.ProductFlavor getDefaultConfig();
    method public java.util.List<com.android.builder.model.ProductFlavor> getFlavors();
    method public boolean getIgnore();
    method public String getName();
    method public void setIgnore(boolean);
    property public abstract com.android.builder.model.BuildType buildType;
    property public abstract com.android.builder.model.ProductFlavor defaultConfig;
    property public abstract java.util.List<com.android.builder.model.ProductFlavor> flavors;
    property public abstract boolean ignore;
    property public abstract String name;
  }

  @org.gradle.api.Incubating public interface VariantInfo {
    method public String getBuildTypeName();
    method public com.google.common.collect.ImmutableList<java.lang.String!> getFlavorNames();
    method public String getFullVariantName();
    method public boolean isDebuggable();
    method public boolean isTest();
  }

  @org.gradle.api.Incubating public interface VariantOutput extends com.android.build.api.variant.VariantOutputConfiguration {
    method @Deprecated public org.gradle.api.provider.Property<java.lang.Boolean> getEnable();
    method public org.gradle.api.provider.Property<java.lang.Boolean> getEnabled();
    method public org.gradle.api.provider.Property<java.lang.Integer> getVersionCode();
    method public org.gradle.api.provider.Property<java.lang.String> getVersionName();
    property @Deprecated public abstract org.gradle.api.provider.Property<java.lang.Boolean> enable;
    property public abstract org.gradle.api.provider.Property<java.lang.Boolean> enabled;
    property public abstract org.gradle.api.provider.Property<java.lang.Integer> versionCode;
    property public abstract org.gradle.api.provider.Property<java.lang.String> versionName;
  }

  @org.gradle.api.Incubating public interface VariantOutputConfiguration {
    method @org.gradle.api.tasks.Nested public java.util.Collection<com.android.build.api.variant.FilterConfiguration> getFilters();
    method @org.gradle.api.tasks.Input public com.android.build.api.variant.VariantOutputConfiguration.OutputType getOutputType();
    property @org.gradle.api.tasks.Nested public abstract java.util.Collection<com.android.build.api.variant.FilterConfiguration> filters;
    property @org.gradle.api.tasks.Input public abstract com.android.build.api.variant.VariantOutputConfiguration.OutputType outputType;
  }

  @org.gradle.api.Incubating public enum VariantOutputConfiguration.OutputType {
    method public static com.android.build.api.variant.VariantOutputConfiguration.OutputType valueOf(String value) throws java.lang.IllegalArgumentException, java.lang.NullPointerException;
    method public static com.android.build.api.variant.VariantOutputConfiguration.OutputType[] values();
    enum_constant public static final com.android.build.api.variant.VariantOutputConfiguration.OutputType ONE_OF_MANY;
    enum_constant public static final com.android.build.api.variant.VariantOutputConfiguration.OutputType SINGLE;
    enum_constant public static final com.android.build.api.variant.VariantOutputConfiguration.OutputType UNIVERSAL;
  }

}

package com.android.build.gradle {

  public final class AssetPackPlugin implements org.gradle.api.Plugin<org.gradle.api.Project> {
    ctor public AssetPackPlugin();
    method public void apply(org.gradle.api.Project project);
  }

}

package com.android.build.gradle.api {

  public final class AndroidBasePlugin implements org.gradle.api.Plugin<org.gradle.api.Project> {
    ctor public AndroidBasePlugin();
    method public void apply(org.gradle.api.Project project);
  }

}

