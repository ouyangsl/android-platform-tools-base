/*
 * Copyright (C) 2015 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.android.build.gradle.internal.pipeline;

import com.android.annotations.NonNull;
import com.android.build.gradle.internal.TaskFactory;
import com.android.build.gradle.internal.scope.AndroidTask;
import com.android.build.gradle.internal.scope.AndroidTaskRegistry;
import com.android.build.gradle.internal.scope.VariantScope;
import com.google.common.collect.Lists;

import java.util.List;

/**
 * A pipeline of bytecode transforms
 */
public class BytecodePipeline {

    /**
     * The type of inputs handled by a transform.
     * PROJECT: only the project files.
     *
     */
    public enum InputStream {
        /** Only the project classes */
        PROJECT,
        /** Only the code of the dependency module. */
        MODULES,
        /** Only the external libraries */
        LIBRARIES,
        /** All the classes, either from the 3 input stream types, or as combined. */
        ALL
    }

    /**
     * The type of output stream generated by the transform
     */
    public enum OutputStream {
        /** Writes the input streams in matching streams */
        AS_INPUT,
        /** Combines all the input streams into a single stream */
        COMBINED
    }

    @NonNull
    private final AndroidTaskRegistry taskRegistry;

    @NonNull
    private final TaskFactory taskFactory;
    @NonNull
    private final VariantScope variantScope;
    private final List<Transform> transforms = Lists.newArrayList();

    public BytecodePipeline(
            @NonNull AndroidTaskRegistry taskRegistry,
            @NonNull TaskFactory taskFactory,
            @NonNull VariantScope variantScope) {
        this.taskRegistry = taskRegistry;
        this.taskFactory = taskFactory;
        this.variantScope = variantScope;
    }

    public void addTransform(@NonNull Transform transform) {
        // TODO: check the order can work depending on stream handling

        // TODO: we probably need a map from transform to tasks
        transforms.add(transform);

        // create the task...
        // Need to figure out the stream based on the previous transforms... Should probaby be dynamic.
        AndroidTask<TransformTask> task = taskRegistry.create(
                taskFactory,
                new TransformTask.ConfigAction(variantScope, transform));
    }
}
